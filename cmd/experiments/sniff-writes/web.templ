package main

templ layout() {
	<!DOCTYPE html>
	<html lang="en">
	<head>
		<meta charset="UTF-8">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<title>File Operations Monitor</title>
		<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
		<style>
			.event-log {
				height: 60vh;
				overflow-y: auto;
				font-family: monospace;
				font-size: 0.85em;
				background-color: #f8f9fa;
				border: 1px solid #dee2e6;
				padding: 10px;
			}
			.event-item {
				padding: 2px 0;
				border-bottom: 1px solid #e9ecef;
			}
			.event-item:last-child {
				border-bottom: none;
			}
			.operation-open { color: #28a745; }
			.operation-read { color: #007bff; }
			.operation-write { color: #fd7e14; }
			.operation-close { color: #6c757d; }
			.filter-section {
				background-color: #f8f9fa;
				border-radius: 0.375rem;
				padding: 1rem;
				margin-bottom: 1rem;
			}
			.stats-card {
				text-align: center;
			}
			.status-indicator {
				width: 10px;
				height: 10px;
				border-radius: 50%;
				display: inline-block;
				margin-right: 5px;
			}
			.status-connected { background-color: #28a745; }
			.status-disconnected { background-color: #dc3545; }
		</style>
	</head>
	<body>
		<div class="container-fluid">
			<nav class="navbar navbar-dark bg-dark mb-4">
				<div class="container-fluid">
					<span class="navbar-brand mb-0 h1">
						<i class="bi bi-file-earmark-text"></i>
						File Operations Monitor
					</span>
					<span class="navbar-text">
						<span id="connection-status" class="status-indicator status-disconnected"></span>
						<span id="connection-text">Disconnected</span>
					</span>
				</div>
			</nav>
			
			{ children... }
		</div>
		
		<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
		<script>
			let ws;
			let eventCount = 0;
			let filteredEventCount = 0;
			
			function connectWebSocket() {
				const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
				const wsUrl = protocol + '//' + window.location.host + '/ws';
				
				ws = new WebSocket(wsUrl);
				
				ws.onopen = function() {
					updateConnectionStatus(true);
				};
				
				ws.onmessage = function(event) {
					const eventData = JSON.parse(event.data);
					addEvent(eventData);
				};
				
				ws.onclose = function() {
					updateConnectionStatus(false);
					// Attempt to reconnect after 3 seconds
					setTimeout(connectWebSocket, 3000);
				};
				
				ws.onerror = function() {
					updateConnectionStatus(false);
				};
			}
			
			function updateConnectionStatus(connected) {
				const statusIndicator = document.getElementById('connection-status');
				const statusText = document.getElementById('connection-text');
				
				if (connected) {
					statusIndicator.className = 'status-indicator status-connected';
					statusText.textContent = 'Connected';
				} else {
					statusIndicator.className = 'status-indicator status-disconnected';
					statusText.textContent = 'Disconnected';
				}
			}
			
			function addEvent(eventData) {
				eventCount++;
				
				if (!shouldShowEvent(eventData)) {
					return;
				}
				
				filteredEventCount++;
				
				const eventLog = document.getElementById('event-log');
				const eventItem = document.createElement('div');
				eventItem.className = 'event-item';
				
				const timestamp = new Date(eventData.timestamp).toLocaleTimeString();
				const operationClass = 'operation-' + eventData.operation;
				
				let content = `<span class="text-muted">[${timestamp}]</span> `;
				content += `<span class="${operationClass}"><strong>${eventData.operation.toUpperCase()}</strong></span> `;
				content += `<span class="text-primary">${eventData.process}</span> `;
				content += `<span class="text-muted">(PID: ${eventData.pid})</span> `;
				if (eventData.filename) {
					content += `<span class="text-dark">${eventData.filename}</span>`;
				}
				if (eventData.write_size > 0) {
					content += ` <span class="text-info">(${eventData.write_size} bytes)</span>`;
				}
				if (eventData.content) {
					content += `<br><span class="text-muted ms-4">Content: "${eventData.content}"</span>`;
					if (eventData.truncated) {
						content += ` <span class="text-warning">[TRUNCATED]</span>`;
					}
				}
				
				eventItem.innerHTML = content;
				eventLog.appendChild(eventItem);
				
				// Auto-scroll to bottom
				eventLog.scrollTop = eventLog.scrollHeight;
				
				// Limit to last 1000 events
				while (eventLog.children.length > 1000) {
					eventLog.removeChild(eventLog.firstChild);
				}
				
				updateStats();
			}
			
			function shouldShowEvent(eventData) {
				// Process filter
				const processFilter = document.getElementById('process-filter').value.toLowerCase();
				if (processFilter && !eventData.process.toLowerCase().includes(processFilter)) {
					return false;
				}
				
				// Operation filter
				const operationFilter = document.getElementById('operation-filter').value;
				if (operationFilter !== 'all' && eventData.operation !== operationFilter) {
					return false;
				}
				
				// File filter
				const fileFilter = document.getElementById('file-filter').value.toLowerCase();
				if (fileFilter && eventData.filename && !eventData.filename.toLowerCase().includes(fileFilter)) {
					return false;
				}
				
				return true;
			}
			
			function updateStats() {
				document.getElementById('total-events').textContent = eventCount;
				document.getElementById('filtered-events').textContent = filteredEventCount;
			}
			
			function clearEvents() {
				document.getElementById('event-log').innerHTML = '';
				eventCount = 0;
				filteredEventCount = 0;
				updateStats();
			}
			
			function applyFilters() {
				// Re-render all events with current filters
				// For simplicity, we'll just clear and let new events come in
				// In a real implementation, you'd store events and re-filter
			}
			
			// Initialize WebSocket connection when page loads
			document.addEventListener('DOMContentLoaded', function() {
				connectWebSocket();
				updateStats();
			});
		</script>
	</body>
	</html>
}

templ index() {
	@layout() {
		<div class="row">
			<div class="col-12">
				<div class="filter-section">
					<h5 class="mb-3">Filters</h5>
					<div class="row g-3">
						<div class="col-md-3">
							<label for="process-filter" class="form-label">Process Name</label>
							<input type="text" class="form-control" id="process-filter" placeholder="e.g., nginx, chrome" oninput="applyFilters()">
						</div>
						<div class="col-md-3">
							<label for="operation-filter" class="form-label">Operation</label>
							<select class="form-select" id="operation-filter" onchange="applyFilters()">
								<option value="all">All Operations</option>
								<option value="open">Open</option>
								<option value="read">Read</option>
								<option value="write">Write</option>
								<option value="close">Close</option>
							</select>
						</div>
						<div class="col-md-3">
							<label for="file-filter" class="form-label">Filename</label>
							<input type="text" class="form-control" id="file-filter" placeholder="e.g., .log, .tmp" oninput="applyFilters()">
						</div>
						<div class="col-md-3">
							<label class="form-label">&nbsp;</label>
							<div class="d-grid">
								<button type="button" class="btn btn-outline-secondary" onclick="clearEvents()">Clear Events</button>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
		
		<div class="row mb-3">
			<div class="col-md-4">
				<div class="card">
					<div class="card-body stats-card">
						<h5 class="card-title">Total Events</h5>
						<h2 class="text-primary" id="total-events">0</h2>
					</div>
				</div>
			</div>
			<div class="col-md-4">
				<div class="card">
					<div class="card-body stats-card">
						<h5 class="card-title">Filtered Events</h5>
						<h2 class="text-success" id="filtered-events">0</h2>
					</div>
				</div>
			</div>
			<div class="col-md-4">
				<div class="card">
					<div class="card-body stats-card">
						<h5 class="card-title">Status</h5>
						<h6 class="text-muted">Real-time Monitoring</h6>
					</div>
				</div>
			</div>
		</div>
		
		<div class="row">
			<div class="col-12">
				<div class="card">
					<div class="card-header">
						<h5 class="mb-0">File Operations Log</h5>
					</div>
					<div class="card-body p-0">
						<div id="event-log" class="event-log"></div>
					</div>
				</div>
			</div>
		</div>
	}
}