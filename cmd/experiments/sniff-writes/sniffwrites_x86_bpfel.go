// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type sniffwritesEvent struct {
	Pid      uint32
	Fd       int32
	Comm     [16]int8
	Filename [64]int8
	Type     uint32
}

// loadSniffwrites returns the embedded CollectionSpec for sniffwrites.
func loadSniffwrites() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_SniffwritesBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load sniffwrites: %w", err)
	}

	return spec, err
}

// loadSniffwritesObjects loads sniffwrites and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*sniffwritesObjects
//	*sniffwritesPrograms
//	*sniffwritesMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadSniffwritesObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadSniffwrites()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// sniffwritesSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type sniffwritesSpecs struct {
	sniffwritesProgramSpecs
	sniffwritesMapSpecs
	sniffwritesVariableSpecs
}

// sniffwritesProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type sniffwritesProgramSpecs struct {
	TraceCloseEnter  *ebpf.ProgramSpec `ebpf:"trace_close_enter"`
	TraceOpenatEnter *ebpf.ProgramSpec `ebpf:"trace_openat_enter"`
	TraceOpenatExit  *ebpf.ProgramSpec `ebpf:"trace_openat_exit"`
	TraceReadEnter   *ebpf.ProgramSpec `ebpf:"trace_read_enter"`
	TraceWriteEnter  *ebpf.ProgramSpec `ebpf:"trace_write_enter"`
}

// sniffwritesMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type sniffwritesMapSpecs struct {
	Events       *ebpf.MapSpec `ebpf:"events"`
	FdToFilename *ebpf.MapSpec `ebpf:"fd_to_filename"`
	ScratchEvent *ebpf.MapSpec `ebpf:"scratch_event"`
	TempPaths    *ebpf.MapSpec `ebpf:"temp_paths"`
}

// sniffwritesVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type sniffwritesVariableSpecs struct {
}

// sniffwritesObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadSniffwritesObjects or ebpf.CollectionSpec.LoadAndAssign.
type sniffwritesObjects struct {
	sniffwritesPrograms
	sniffwritesMaps
	sniffwritesVariables
}

func (o *sniffwritesObjects) Close() error {
	return _SniffwritesClose(
		&o.sniffwritesPrograms,
		&o.sniffwritesMaps,
	)
}

// sniffwritesMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadSniffwritesObjects or ebpf.CollectionSpec.LoadAndAssign.
type sniffwritesMaps struct {
	Events       *ebpf.Map `ebpf:"events"`
	FdToFilename *ebpf.Map `ebpf:"fd_to_filename"`
	ScratchEvent *ebpf.Map `ebpf:"scratch_event"`
	TempPaths    *ebpf.Map `ebpf:"temp_paths"`
}

func (m *sniffwritesMaps) Close() error {
	return _SniffwritesClose(
		m.Events,
		m.FdToFilename,
		m.ScratchEvent,
		m.TempPaths,
	)
}

// sniffwritesVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadSniffwritesObjects or ebpf.CollectionSpec.LoadAndAssign.
type sniffwritesVariables struct {
}

// sniffwritesPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadSniffwritesObjects or ebpf.CollectionSpec.LoadAndAssign.
type sniffwritesPrograms struct {
	TraceCloseEnter  *ebpf.Program `ebpf:"trace_close_enter"`
	TraceOpenatEnter *ebpf.Program `ebpf:"trace_openat_enter"`
	TraceOpenatExit  *ebpf.Program `ebpf:"trace_openat_exit"`
	TraceReadEnter   *ebpf.Program `ebpf:"trace_read_enter"`
	TraceWriteEnter  *ebpf.Program `ebpf:"trace_write_enter"`
}

func (p *sniffwritesPrograms) Close() error {
	return _SniffwritesClose(
		p.TraceCloseEnter,
		p.TraceOpenatEnter,
		p.TraceOpenatExit,
		p.TraceReadEnter,
		p.TraceWriteEnter,
	)
}

func _SniffwritesClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed sniffwrites_x86_bpfel.o
var _SniffwritesBytes []byte
