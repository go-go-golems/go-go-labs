// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.865
package main

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func layout() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!doctype html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>File Operations Monitor</title><link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\"><style>\n\t\t\t.event-log {\n\t\t\t\theight: 60vh;\n\t\t\t\toverflow-y: auto;\n\t\t\t\tfont-family: monospace;\n\t\t\t\tfont-size: 0.85em;\n\t\t\t\tbackground-color: #f8f9fa;\n\t\t\t\tborder: 1px solid #dee2e6;\n\t\t\t\tpadding: 10px;\n\t\t\t}\n\t\t\t.event-item {\n\t\t\t\tpadding: 2px 0;\n\t\t\t\tborder-bottom: 1px solid #e9ecef;\n\t\t\t}\n\t\t\t.event-item:last-child {\n\t\t\t\tborder-bottom: none;\n\t\t\t}\n\t\t\t.operation-open { color: #28a745; }\n\t\t\t.operation-read { color: #007bff; }\n\t\t\t.operation-write { color: #fd7e14; }\n\t\t\t.operation-close { color: #6c757d; }\n\t\t\t.filter-section {\n\t\t\t\tbackground-color: #f8f9fa;\n\t\t\t\tborder-radius: 0.375rem;\n\t\t\t\tpadding: 1rem;\n\t\t\t\tmargin-bottom: 1rem;\n\t\t\t}\n\t\t\t.stats-card {\n\t\t\t\ttext-align: center;\n\t\t\t}\n\t\t\t.status-indicator {\n\t\t\t\twidth: 10px;\n\t\t\t\theight: 10px;\n\t\t\t\tborder-radius: 50%;\n\t\t\t\tdisplay: inline-block;\n\t\t\t\tmargin-right: 5px;\n\t\t\t}\n\t\t\t.status-connected { background-color: #28a745; }\n\t\t\t.status-disconnected { background-color: #dc3545; }\n\t\t</style></head><body><div class=\"container-fluid\"><nav class=\"navbar navbar-dark bg-dark mb-4\"><div class=\"container-fluid\"><span class=\"navbar-brand mb-0 h1\"><i class=\"bi bi-file-earmark-text\"></i> File Operations Monitor</span> <span class=\"navbar-text\"><span id=\"connection-status\" class=\"status-indicator status-disconnected\"></span> <span id=\"connection-text\">Disconnected</span></span></div></nav>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ_7745c5c3_Var1.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "</div><script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"></script><script>\n\t\t\tlet ws;\n\t\t\tlet eventCount = 0;\n\t\t\tlet filteredEventCount = 0;\n\t\t\tlet allEvents = []; // Store all events for filtering\n\t\t\tconst maxStoredEvents = 2000; // Limit stored events for performance\n\t\t\tlet showFilteredEvents = false; // Toggle to show filtered out events\n\t\t\t\n\t\t\tfunction connectWebSocket() {\n\t\t\t\tconst protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n\t\t\t\tconst wsUrl = protocol + '//' + window.location.host + '/ws';\n\t\t\t\t\n\t\t\t\tws = new WebSocket(wsUrl);\n\t\t\t\t\n\t\t\t\tws.onopen = function() {\n\t\t\t\t\tupdateConnectionStatus(true);\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tws.onmessage = function(event) {\n\t\t\t\t\tconst eventData = JSON.parse(event.data);\n\t\t\t\t\taddEvent(eventData);\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tws.onclose = function() {\n\t\t\t\t\tupdateConnectionStatus(false);\n\t\t\t\t\t// Attempt to reconnect after 3 seconds\n\t\t\t\t\tsetTimeout(connectWebSocket, 3000);\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tws.onerror = function() {\n\t\t\t\t\tupdateConnectionStatus(false);\n\t\t\t\t};\n\t\t\t}\n\t\t\t\n\t\t\tfunction updateConnectionStatus(connected) {\n\t\t\t\tconst statusIndicator = document.getElementById('connection-status');\n\t\t\t\tconst statusText = document.getElementById('connection-text');\n\t\t\t\t\n\t\t\t\tif (connected) {\n\t\t\t\t\tstatusIndicator.className = 'status-indicator status-connected';\n\t\t\t\t\tstatusText.textContent = 'Connected';\n\t\t\t\t} else {\n\t\t\t\t\tstatusIndicator.className = 'status-indicator status-disconnected';\n\t\t\t\t\tstatusText.textContent = 'Disconnected';\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfunction addEvent(eventData) {\n\t\t\t\teventCount++;\n\t\t\t\t\n\t\t\t\t// Store event for filtering\n\t\t\t\tallEvents.push(eventData);\n\t\t\t\t\n\t\t\t\t// Limit stored events for performance\n\t\t\t\tif (allEvents.length > maxStoredEvents) {\n\t\t\t\t\tallEvents.shift();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Re-render the filtered view\n\t\t\t\trenderFilteredEvents();\n\t\t\t}\n\t\t\t\n\t\t\tfunction renderFilteredEvents() {\n\t\t\t\tconst eventLog = document.getElementById('event-log');\n\t\t\t\teventLog.innerHTML = ''; // Clear existing events\n\t\t\t\t\n\t\t\t\tfilteredEventCount = 0;\n\t\t\t\t\n\t\t\t\t// Filter and display events\n\t\t\t\tfor (const eventData of allEvents) {\n\t\t\t\t\tconst passesFilter = shouldShowEvent(eventData);\n\t\t\t\t\t\n\t\t\t\t\tif (passesFilter) {\n\t\t\t\t\t\tfilteredEventCount++;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Show event if it passes filter, or if we're showing filtered events and it doesn't pass\n\t\t\t\t\tif (passesFilter || showFilteredEvents) {\n\t\t\t\t\t\tconst eventItem = createEventElement(eventData, !passesFilter);\n\t\t\t\t\t\teventLog.appendChild(eventItem);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Auto-scroll to bottom\n\t\t\t\teventLog.scrollTop = eventLog.scrollHeight;\n\t\t\t\t\n\t\t\t\tupdateStats();\n\t\t\t}\n\t\t\t\n\t\t\tfunction createEventElement(eventData, isFiltered = false) {\n\t\t\t\tconst eventItem = document.createElement('div');\n\t\t\t\teventItem.className = isFiltered ? 'event-item text-muted' : 'event-item';\n\t\t\t\t\n\t\t\t\tif (isFiltered) {\n\t\t\t\t\teventItem.style.opacity = '0.5';\n\t\t\t\t\teventItem.style.backgroundColor = '#f8f9fa';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tconst timestamp = new Date(eventData.timestamp).toLocaleTimeString();\n\t\t\t\tconst operationClass = 'operation-' + eventData.operation;\n\t\t\t\t\n\t\t\t\tlet content = '';\n\t\t\t\tif (isFiltered) {\n\t\t\t\t\tcontent += `<span class=\"badge bg-secondary me-2\">FILTERED</span>`;\n\t\t\t\t}\n\t\t\t\tcontent += `<span class=\"text-muted\">[${timestamp}]</span> `;\n\t\t\t\tcontent += `<span class=\"${operationClass}\"><strong>${eventData.operation.toUpperCase()}</strong></span> `;\n\t\t\t\tcontent += `<span class=\"text-primary\">${eventData.process}</span> `;\n\t\t\t\tcontent += `<span class=\"text-muted\">(PID: ${eventData.pid})</span> `;\n\t\t\t\tif (eventData.filename) {\n\t\t\t\t\tcontent += `<span class=\"text-dark\">${eventData.filename}</span>`;\n\t\t\t\t}\n\t\t\t\tif (eventData.write_size > 0) {\n\t\t\t\t\tcontent += ` <span class=\"text-info\">(${eventData.write_size} bytes)</span>`;\n\t\t\t\t}\n\t\t\t\tif (eventData.content) {\n\t\t\t\t\tcontent += `<br><span class=\"text-muted ms-4\">Content: \"${eventData.content}\"</span>`;\n\t\t\t\t\tif (eventData.truncated) {\n\t\t\t\t\t\tcontent += ` <span class=\"text-warning\">[TRUNCATED]</span>`;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\teventItem.innerHTML = content;\n\t\t\t\treturn eventItem;\n\t\t\t}\n\t\t\t\n\t\t\tfunction shouldShowEvent(eventData) {\n\t\t\t\t// Process filter\n\t\t\t\tconst processFilter = document.getElementById('process-filter').value.toLowerCase();\n\t\t\t\tif (processFilter && !eventData.process.toLowerCase().includes(processFilter)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Operation filter\n\t\t\t\tconst operationFilter = document.getElementById('operation-filter').value;\n\t\t\t\tif (operationFilter !== 'all' && eventData.operation !== operationFilter) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// File filter\n\t\t\t\tconst fileFilter = document.getElementById('file-filter').value.toLowerCase();\n\t\t\t\tif (fileFilter && eventData.filename && !eventData.filename.toLowerCase().includes(fileFilter)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t\n\t\t\tfunction updateStats() {\n\t\t\t\tconst filteredOutCount = allEvents.length - filteredEventCount;\n\t\t\t\tdocument.getElementById('total-events').textContent = eventCount;\n\t\t\t\tdocument.getElementById('filtered-events').textContent = filteredEventCount;\n\t\t\t\tdocument.getElementById('filtered-out-events').textContent = filteredOutCount;\n\t\t\t}\n\t\t\t\n\t\t\tfunction clearEvents() {\n\t\t\t\tallEvents = [];\n\t\t\t\teventCount = 0;\n\t\t\t\tfilteredEventCount = 0;\n\t\t\t\tdocument.getElementById('event-log').innerHTML = '';\n\t\t\t\tupdateStats();\n\t\t\t}\n\t\t\t\n\t\t\tfunction applyFilters() {\n\t\t\t\t// Re-render all events with current filters\n\t\t\t\trenderFilteredEvents();\n\t\t\t}\n\t\t\t\n\t\t\tfunction toggleShowFiltered() {\n\t\t\t\tshowFilteredEvents = !showFilteredEvents;\n\t\t\t\tconst btn = document.getElementById('show-filtered-btn');\n\t\t\t\t\n\t\t\t\tif (showFilteredEvents) {\n\t\t\t\t\tbtn.textContent = 'Hide Filtered';\n\t\t\t\t\tbtn.classList.remove('btn-outline-info');\n\t\t\t\t\tbtn.classList.add('btn-info');\n\t\t\t\t} else {\n\t\t\t\t\tbtn.textContent = 'Show Filtered';\n\t\t\t\t\tbtn.classList.remove('btn-info');\n\t\t\t\t\tbtn.classList.add('btn-outline-info');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\trenderFilteredEvents();\n\t\t\t}\n\t\t\t\n\t\t\t// Initialize WebSocket connection when page loads\n\t\t\tdocument.addEventListener('DOMContentLoaded', function() {\n\t\t\t\tconnectWebSocket();\n\t\t\t\tupdateStats();\n\t\t\t});\n\t\t</script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func index() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var3 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<div class=\"row\"><div class=\"col-12\"><div class=\"filter-section\"><h5 class=\"mb-3\">Filters</h5><div class=\"row g-3\"><div class=\"col-md-3\"><label for=\"process-filter\" class=\"form-label\">Process Name</label> <input type=\"text\" class=\"form-control\" id=\"process-filter\" placeholder=\"e.g., nginx, chrome\" oninput=\"applyFilters()\"></div><div class=\"col-md-3\"><label for=\"operation-filter\" class=\"form-label\">Operation</label> <select class=\"form-select\" id=\"operation-filter\" onchange=\"applyFilters()\"><option value=\"all\">All Operations</option> <option value=\"open\">Open</option> <option value=\"read\">Read</option> <option value=\"write\">Write</option> <option value=\"close\">Close</option></select></div><div class=\"col-md-3\"><label for=\"file-filter\" class=\"form-label\">Filename</label> <input type=\"text\" class=\"form-control\" id=\"file-filter\" placeholder=\"e.g., .log, .tmp\" oninput=\"applyFilters()\"></div><div class=\"col-md-2\"><label class=\"form-label\">&nbsp;</label><div class=\"d-grid\"><button type=\"button\" class=\"btn btn-outline-secondary\" onclick=\"clearEvents()\">Clear Events</button></div></div><div class=\"col-md-2\"><label class=\"form-label\">&nbsp;</label><div class=\"d-grid\"><button type=\"button\" class=\"btn btn-outline-info\" id=\"show-filtered-btn\" onclick=\"toggleShowFiltered()\">Show Filtered</button></div></div></div></div></div></div><div class=\"row mb-3\"><div class=\"col-md-3\"><div class=\"card\"><div class=\"card-body stats-card\"><h5 class=\"card-title\">Total Events</h5><h2 class=\"text-primary\" id=\"total-events\">0</h2></div></div></div><div class=\"col-md-3\"><div class=\"card\"><div class=\"card-body stats-card\"><h5 class=\"card-title\">Visible Events</h5><h2 class=\"text-success\" id=\"filtered-events\">0</h2></div></div></div><div class=\"col-md-3\"><div class=\"card\"><div class=\"card-body stats-card\"><h5 class=\"card-title\">Filtered Out</h5><h2 class=\"text-warning\" id=\"filtered-out-events\">0</h2></div></div></div><div class=\"col-md-3\"><div class=\"card\"><div class=\"card-body stats-card\"><h5 class=\"card-title\">Status</h5><h6 class=\"text-muted\">Real-time Monitoring</h6></div></div></div></div><div class=\"row\"><div class=\"col-12\"><div class=\"card\"><div class=\"card-header\"><h5 class=\"mb-0\">File Operations Log</h5></div><div class=\"card-body p-0\"><div id=\"event-log\" class=\"event-log\"></div></div></div></div></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = layout().Render(templ.WithChildren(ctx, templ_7745c5c3_Var3), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
