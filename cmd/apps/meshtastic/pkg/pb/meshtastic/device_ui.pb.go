// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: meshtastic/device_ui.proto

package generated

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CompassMode int32

const (
	// Compass with dynamic ring and heading
	CompassMode_DYNAMIC CompassMode = 0
	// Compass with fixed ring and heading
	CompassMode_FIXED_RING CompassMode = 1
	// Compass with heading and freeze option
	CompassMode_FREEZE_HEADING CompassMode = 2
)

// Enum value maps for CompassMode.
var (
	CompassMode_name = map[int32]string{
		0: "DYNAMIC",
		1: "FIXED_RING",
		2: "FREEZE_HEADING",
	}
	CompassMode_value = map[string]int32{
		"DYNAMIC":        0,
		"FIXED_RING":     1,
		"FREEZE_HEADING": 2,
	}
)

func (x CompassMode) Enum() *CompassMode {
	p := new(CompassMode)
	*p = x
	return p
}

func (x CompassMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompassMode) Descriptor() protoreflect.EnumDescriptor {
	return file_meshtastic_device_ui_proto_enumTypes[0].Descriptor()
}

func (CompassMode) Type() protoreflect.EnumType {
	return &file_meshtastic_device_ui_proto_enumTypes[0]
}

func (x CompassMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompassMode.Descriptor instead.
func (CompassMode) EnumDescriptor() ([]byte, []int) {
	return file_meshtastic_device_ui_proto_rawDescGZIP(), []int{0}
}

type Theme int32

const (
	// Dark
	Theme_DARK Theme = 0
	// Light
	Theme_LIGHT Theme = 1
	// Red
	Theme_RED Theme = 2
)

// Enum value maps for Theme.
var (
	Theme_name = map[int32]string{
		0: "DARK",
		1: "LIGHT",
		2: "RED",
	}
	Theme_value = map[string]int32{
		"DARK":  0,
		"LIGHT": 1,
		"RED":   2,
	}
)

func (x Theme) Enum() *Theme {
	p := new(Theme)
	*p = x
	return p
}

func (x Theme) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Theme) Descriptor() protoreflect.EnumDescriptor {
	return file_meshtastic_device_ui_proto_enumTypes[1].Descriptor()
}

func (Theme) Type() protoreflect.EnumType {
	return &file_meshtastic_device_ui_proto_enumTypes[1]
}

func (x Theme) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Theme.Descriptor instead.
func (Theme) EnumDescriptor() ([]byte, []int) {
	return file_meshtastic_device_ui_proto_rawDescGZIP(), []int{1}
}

// Localization
type Language int32

const (
	// English
	Language_ENGLISH Language = 0
	// French
	Language_FRENCH Language = 1
	// German
	Language_GERMAN Language = 2
	// Italian
	Language_ITALIAN Language = 3
	// Portuguese
	Language_PORTUGUESE Language = 4
	// Spanish
	Language_SPANISH Language = 5
	// Swedish
	Language_SWEDISH Language = 6
	// Finnish
	Language_FINNISH Language = 7
	// Polish
	Language_POLISH Language = 8
	// Turkish
	Language_TURKISH Language = 9
	// Serbian
	Language_SERBIAN Language = 10
	// Russian
	Language_RUSSIAN Language = 11
	// Dutch
	Language_DUTCH Language = 12
	// Greek
	Language_GREEK Language = 13
	// Norwegian
	Language_NORWEGIAN Language = 14
	// Slovenian
	Language_SLOVENIAN Language = 15
	// Ukrainian
	Language_UKRAINIAN Language = 16
	// Bulgarian
	Language_BULGARIAN Language = 17
	// Simplified Chinese (experimental)
	Language_SIMPLIFIED_CHINESE Language = 30
	// Traditional Chinese (experimental)
	Language_TRADITIONAL_CHINESE Language = 31
)

// Enum value maps for Language.
var (
	Language_name = map[int32]string{
		0:  "ENGLISH",
		1:  "FRENCH",
		2:  "GERMAN",
		3:  "ITALIAN",
		4:  "PORTUGUESE",
		5:  "SPANISH",
		6:  "SWEDISH",
		7:  "FINNISH",
		8:  "POLISH",
		9:  "TURKISH",
		10: "SERBIAN",
		11: "RUSSIAN",
		12: "DUTCH",
		13: "GREEK",
		14: "NORWEGIAN",
		15: "SLOVENIAN",
		16: "UKRAINIAN",
		17: "BULGARIAN",
		30: "SIMPLIFIED_CHINESE",
		31: "TRADITIONAL_CHINESE",
	}
	Language_value = map[string]int32{
		"ENGLISH":             0,
		"FRENCH":              1,
		"GERMAN":              2,
		"ITALIAN":             3,
		"PORTUGUESE":          4,
		"SPANISH":             5,
		"SWEDISH":             6,
		"FINNISH":             7,
		"POLISH":              8,
		"TURKISH":             9,
		"SERBIAN":             10,
		"RUSSIAN":             11,
		"DUTCH":               12,
		"GREEK":               13,
		"NORWEGIAN":           14,
		"SLOVENIAN":           15,
		"UKRAINIAN":           16,
		"BULGARIAN":           17,
		"SIMPLIFIED_CHINESE":  30,
		"TRADITIONAL_CHINESE": 31,
	}
)

func (x Language) Enum() *Language {
	p := new(Language)
	*p = x
	return p
}

func (x Language) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Language) Descriptor() protoreflect.EnumDescriptor {
	return file_meshtastic_device_ui_proto_enumTypes[2].Descriptor()
}

func (Language) Type() protoreflect.EnumType {
	return &file_meshtastic_device_ui_proto_enumTypes[2]
}

func (x Language) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Language.Descriptor instead.
func (Language) EnumDescriptor() ([]byte, []int) {
	return file_meshtastic_device_ui_proto_rawDescGZIP(), []int{2}
}

type DeviceUIConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A version integer used to invalidate saved files when we make incompatible changes.
	Version uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// TFT display brightness 1..255
	ScreenBrightness uint32 `protobuf:"varint,2,opt,name=screen_brightness,json=screenBrightness,proto3" json:"screen_brightness,omitempty"`
	// Screen timeout 0..900
	ScreenTimeout uint32 `protobuf:"varint,3,opt,name=screen_timeout,json=screenTimeout,proto3" json:"screen_timeout,omitempty"`
	// Screen/Settings lock enabled
	ScreenLock   bool   `protobuf:"varint,4,opt,name=screen_lock,json=screenLock,proto3" json:"screen_lock,omitempty"`
	SettingsLock bool   `protobuf:"varint,5,opt,name=settings_lock,json=settingsLock,proto3" json:"settings_lock,omitempty"`
	PinCode      uint32 `protobuf:"varint,6,opt,name=pin_code,json=pinCode,proto3" json:"pin_code,omitempty"`
	// Color theme
	Theme Theme `protobuf:"varint,7,opt,name=theme,proto3,enum=meshtastic.Theme" json:"theme,omitempty"`
	// Audible message, banner and ring tone
	AlertEnabled  bool   `protobuf:"varint,8,opt,name=alert_enabled,json=alertEnabled,proto3" json:"alert_enabled,omitempty"`
	BannerEnabled bool   `protobuf:"varint,9,opt,name=banner_enabled,json=bannerEnabled,proto3" json:"banner_enabled,omitempty"`
	RingToneId    uint32 `protobuf:"varint,10,opt,name=ring_tone_id,json=ringToneId,proto3" json:"ring_tone_id,omitempty"`
	// Localization
	Language Language `protobuf:"varint,11,opt,name=language,proto3,enum=meshtastic.Language" json:"language,omitempty"`
	// Node list filter
	NodeFilter *NodeFilter `protobuf:"bytes,12,opt,name=node_filter,json=nodeFilter,proto3" json:"node_filter,omitempty"`
	// Node list highlightening
	NodeHighlight *NodeHighlight `protobuf:"bytes,13,opt,name=node_highlight,json=nodeHighlight,proto3" json:"node_highlight,omitempty"`
	// 8 integers for screen calibration data
	CalibrationData []byte `protobuf:"bytes,14,opt,name=calibration_data,json=calibrationData,proto3" json:"calibration_data,omitempty"`
	// Map related data
	MapData *Map `protobuf:"bytes,15,opt,name=map_data,json=mapData,proto3" json:"map_data,omitempty"`
	// Compass mode
	CompassMode CompassMode `protobuf:"varint,16,opt,name=compass_mode,json=compassMode,proto3,enum=meshtastic.CompassMode" json:"compass_mode,omitempty"`
	// RGB color for BaseUI
	// 0xRRGGBB format, e.g. 0xFF0000 for red
	ScreenRgbColor uint32 `protobuf:"varint,17,opt,name=screen_rgb_color,json=screenRgbColor,proto3" json:"screen_rgb_color,omitempty"`
	// Clockface analog style
	// true for analog clockface, false for digital clockface
	IsClockfaceAnalog bool `protobuf:"varint,18,opt,name=is_clockface_analog,json=isClockfaceAnalog,proto3" json:"is_clockface_analog,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *DeviceUIConfig) Reset() {
	*x = DeviceUIConfig{}
	mi := &file_meshtastic_device_ui_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceUIConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceUIConfig) ProtoMessage() {}

func (x *DeviceUIConfig) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_device_ui_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceUIConfig.ProtoReflect.Descriptor instead.
func (*DeviceUIConfig) Descriptor() ([]byte, []int) {
	return file_meshtastic_device_ui_proto_rawDescGZIP(), []int{0}
}

func (x *DeviceUIConfig) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *DeviceUIConfig) GetScreenBrightness() uint32 {
	if x != nil {
		return x.ScreenBrightness
	}
	return 0
}

func (x *DeviceUIConfig) GetScreenTimeout() uint32 {
	if x != nil {
		return x.ScreenTimeout
	}
	return 0
}

func (x *DeviceUIConfig) GetScreenLock() bool {
	if x != nil {
		return x.ScreenLock
	}
	return false
}

func (x *DeviceUIConfig) GetSettingsLock() bool {
	if x != nil {
		return x.SettingsLock
	}
	return false
}

func (x *DeviceUIConfig) GetPinCode() uint32 {
	if x != nil {
		return x.PinCode
	}
	return 0
}

func (x *DeviceUIConfig) GetTheme() Theme {
	if x != nil {
		return x.Theme
	}
	return Theme_DARK
}

func (x *DeviceUIConfig) GetAlertEnabled() bool {
	if x != nil {
		return x.AlertEnabled
	}
	return false
}

func (x *DeviceUIConfig) GetBannerEnabled() bool {
	if x != nil {
		return x.BannerEnabled
	}
	return false
}

func (x *DeviceUIConfig) GetRingToneId() uint32 {
	if x != nil {
		return x.RingToneId
	}
	return 0
}

func (x *DeviceUIConfig) GetLanguage() Language {
	if x != nil {
		return x.Language
	}
	return Language_ENGLISH
}

func (x *DeviceUIConfig) GetNodeFilter() *NodeFilter {
	if x != nil {
		return x.NodeFilter
	}
	return nil
}

func (x *DeviceUIConfig) GetNodeHighlight() *NodeHighlight {
	if x != nil {
		return x.NodeHighlight
	}
	return nil
}

func (x *DeviceUIConfig) GetCalibrationData() []byte {
	if x != nil {
		return x.CalibrationData
	}
	return nil
}

func (x *DeviceUIConfig) GetMapData() *Map {
	if x != nil {
		return x.MapData
	}
	return nil
}

func (x *DeviceUIConfig) GetCompassMode() CompassMode {
	if x != nil {
		return x.CompassMode
	}
	return CompassMode_DYNAMIC
}

func (x *DeviceUIConfig) GetScreenRgbColor() uint32 {
	if x != nil {
		return x.ScreenRgbColor
	}
	return 0
}

func (x *DeviceUIConfig) GetIsClockfaceAnalog() bool {
	if x != nil {
		return x.IsClockfaceAnalog
	}
	return false
}

type NodeFilter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Filter unknown nodes
	UnknownSwitch bool `protobuf:"varint,1,opt,name=unknown_switch,json=unknownSwitch,proto3" json:"unknown_switch,omitempty"`
	// Filter offline nodes
	OfflineSwitch bool `protobuf:"varint,2,opt,name=offline_switch,json=offlineSwitch,proto3" json:"offline_switch,omitempty"`
	// Filter nodes w/o public key
	PublicKeySwitch bool `protobuf:"varint,3,opt,name=public_key_switch,json=publicKeySwitch,proto3" json:"public_key_switch,omitempty"`
	// Filter based on hops away
	HopsAway int32 `protobuf:"varint,4,opt,name=hops_away,json=hopsAway,proto3" json:"hops_away,omitempty"`
	// Filter nodes w/o position
	PositionSwitch bool `protobuf:"varint,5,opt,name=position_switch,json=positionSwitch,proto3" json:"position_switch,omitempty"`
	// Filter nodes by matching name string
	NodeName string `protobuf:"bytes,6,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// Filter based on channel
	Channel       int32 `protobuf:"varint,7,opt,name=channel,proto3" json:"channel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeFilter) Reset() {
	*x = NodeFilter{}
	mi := &file_meshtastic_device_ui_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeFilter) ProtoMessage() {}

func (x *NodeFilter) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_device_ui_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeFilter.ProtoReflect.Descriptor instead.
func (*NodeFilter) Descriptor() ([]byte, []int) {
	return file_meshtastic_device_ui_proto_rawDescGZIP(), []int{1}
}

func (x *NodeFilter) GetUnknownSwitch() bool {
	if x != nil {
		return x.UnknownSwitch
	}
	return false
}

func (x *NodeFilter) GetOfflineSwitch() bool {
	if x != nil {
		return x.OfflineSwitch
	}
	return false
}

func (x *NodeFilter) GetPublicKeySwitch() bool {
	if x != nil {
		return x.PublicKeySwitch
	}
	return false
}

func (x *NodeFilter) GetHopsAway() int32 {
	if x != nil {
		return x.HopsAway
	}
	return 0
}

func (x *NodeFilter) GetPositionSwitch() bool {
	if x != nil {
		return x.PositionSwitch
	}
	return false
}

func (x *NodeFilter) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *NodeFilter) GetChannel() int32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

type NodeHighlight struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Hightlight nodes w/ active chat
	ChatSwitch bool `protobuf:"varint,1,opt,name=chat_switch,json=chatSwitch,proto3" json:"chat_switch,omitempty"`
	// Highlight nodes w/ position
	PositionSwitch bool `protobuf:"varint,2,opt,name=position_switch,json=positionSwitch,proto3" json:"position_switch,omitempty"`
	// Highlight nodes w/ telemetry data
	TelemetrySwitch bool `protobuf:"varint,3,opt,name=telemetry_switch,json=telemetrySwitch,proto3" json:"telemetry_switch,omitempty"`
	// Highlight nodes w/ iaq data
	IaqSwitch bool `protobuf:"varint,4,opt,name=iaq_switch,json=iaqSwitch,proto3" json:"iaq_switch,omitempty"`
	// Highlight nodes by matching name string
	NodeName      string `protobuf:"bytes,5,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeHighlight) Reset() {
	*x = NodeHighlight{}
	mi := &file_meshtastic_device_ui_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeHighlight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeHighlight) ProtoMessage() {}

func (x *NodeHighlight) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_device_ui_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeHighlight.ProtoReflect.Descriptor instead.
func (*NodeHighlight) Descriptor() ([]byte, []int) {
	return file_meshtastic_device_ui_proto_rawDescGZIP(), []int{2}
}

func (x *NodeHighlight) GetChatSwitch() bool {
	if x != nil {
		return x.ChatSwitch
	}
	return false
}

func (x *NodeHighlight) GetPositionSwitch() bool {
	if x != nil {
		return x.PositionSwitch
	}
	return false
}

func (x *NodeHighlight) GetTelemetrySwitch() bool {
	if x != nil {
		return x.TelemetrySwitch
	}
	return false
}

func (x *NodeHighlight) GetIaqSwitch() bool {
	if x != nil {
		return x.IaqSwitch
	}
	return false
}

func (x *NodeHighlight) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

type GeoPoint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Zoom level
	Zoom int32 `protobuf:"varint,1,opt,name=zoom,proto3" json:"zoom,omitempty"`
	// Coordinate: latitude
	Latitude int32 `protobuf:"varint,2,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// Coordinate: longitude
	Longitude     int32 `protobuf:"varint,3,opt,name=longitude,proto3" json:"longitude,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GeoPoint) Reset() {
	*x = GeoPoint{}
	mi := &file_meshtastic_device_ui_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeoPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoPoint) ProtoMessage() {}

func (x *GeoPoint) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_device_ui_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoPoint.ProtoReflect.Descriptor instead.
func (*GeoPoint) Descriptor() ([]byte, []int) {
	return file_meshtastic_device_ui_proto_rawDescGZIP(), []int{3}
}

func (x *GeoPoint) GetZoom() int32 {
	if x != nil {
		return x.Zoom
	}
	return 0
}

func (x *GeoPoint) GetLatitude() int32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *GeoPoint) GetLongitude() int32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

type Map struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Home coordinates
	Home *GeoPoint `protobuf:"bytes,1,opt,name=home,proto3" json:"home,omitempty"`
	// Map tile style
	Style string `protobuf:"bytes,2,opt,name=style,proto3" json:"style,omitempty"`
	// Map scroll follows GPS
	FollowGps     bool `protobuf:"varint,3,opt,name=follow_gps,json=followGps,proto3" json:"follow_gps,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Map) Reset() {
	*x = Map{}
	mi := &file_meshtastic_device_ui_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Map) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Map) ProtoMessage() {}

func (x *Map) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_device_ui_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Map.ProtoReflect.Descriptor instead.
func (*Map) Descriptor() ([]byte, []int) {
	return file_meshtastic_device_ui_proto_rawDescGZIP(), []int{4}
}

func (x *Map) GetHome() *GeoPoint {
	if x != nil {
		return x.Home
	}
	return nil
}

func (x *Map) GetStyle() string {
	if x != nil {
		return x.Style
	}
	return ""
}

func (x *Map) GetFollowGps() bool {
	if x != nil {
		return x.FollowGps
	}
	return false
}

var File_meshtastic_device_ui_proto protoreflect.FileDescriptor

const file_meshtastic_device_ui_proto_rawDesc = "" +
	"\n" +
	"\x1ameshtastic/device_ui.proto\x12\n" +
	"meshtastic\"\x90\x06\n" +
	"\x0eDeviceUIConfig\x12\x18\n" +
	"\aversion\x18\x01 \x01(\rR\aversion\x12+\n" +
	"\x11screen_brightness\x18\x02 \x01(\rR\x10screenBrightness\x12%\n" +
	"\x0escreen_timeout\x18\x03 \x01(\rR\rscreenTimeout\x12\x1f\n" +
	"\vscreen_lock\x18\x04 \x01(\bR\n" +
	"screenLock\x12#\n" +
	"\rsettings_lock\x18\x05 \x01(\bR\fsettingsLock\x12\x19\n" +
	"\bpin_code\x18\x06 \x01(\rR\apinCode\x12'\n" +
	"\x05theme\x18\a \x01(\x0e2\x11.meshtastic.ThemeR\x05theme\x12#\n" +
	"\ralert_enabled\x18\b \x01(\bR\falertEnabled\x12%\n" +
	"\x0ebanner_enabled\x18\t \x01(\bR\rbannerEnabled\x12 \n" +
	"\fring_tone_id\x18\n" +
	" \x01(\rR\n" +
	"ringToneId\x120\n" +
	"\blanguage\x18\v \x01(\x0e2\x14.meshtastic.LanguageR\blanguage\x127\n" +
	"\vnode_filter\x18\f \x01(\v2\x16.meshtastic.NodeFilterR\n" +
	"nodeFilter\x12@\n" +
	"\x0enode_highlight\x18\r \x01(\v2\x19.meshtastic.NodeHighlightR\rnodeHighlight\x12)\n" +
	"\x10calibration_data\x18\x0e \x01(\fR\x0fcalibrationData\x12*\n" +
	"\bmap_data\x18\x0f \x01(\v2\x0f.meshtastic.MapR\amapData\x12:\n" +
	"\fcompass_mode\x18\x10 \x01(\x0e2\x17.meshtastic.CompassModeR\vcompassMode\x12(\n" +
	"\x10screen_rgb_color\x18\x11 \x01(\rR\x0escreenRgbColor\x12.\n" +
	"\x13is_clockface_analog\x18\x12 \x01(\bR\x11isClockfaceAnalog\"\x83\x02\n" +
	"\n" +
	"NodeFilter\x12%\n" +
	"\x0eunknown_switch\x18\x01 \x01(\bR\runknownSwitch\x12%\n" +
	"\x0eoffline_switch\x18\x02 \x01(\bR\rofflineSwitch\x12*\n" +
	"\x11public_key_switch\x18\x03 \x01(\bR\x0fpublicKeySwitch\x12\x1b\n" +
	"\thops_away\x18\x04 \x01(\x05R\bhopsAway\x12'\n" +
	"\x0fposition_switch\x18\x05 \x01(\bR\x0epositionSwitch\x12\x1b\n" +
	"\tnode_name\x18\x06 \x01(\tR\bnodeName\x12\x18\n" +
	"\achannel\x18\a \x01(\x05R\achannel\"\xc0\x01\n" +
	"\rNodeHighlight\x12\x1f\n" +
	"\vchat_switch\x18\x01 \x01(\bR\n" +
	"chatSwitch\x12'\n" +
	"\x0fposition_switch\x18\x02 \x01(\bR\x0epositionSwitch\x12)\n" +
	"\x10telemetry_switch\x18\x03 \x01(\bR\x0ftelemetrySwitch\x12\x1d\n" +
	"\n" +
	"iaq_switch\x18\x04 \x01(\bR\tiaqSwitch\x12\x1b\n" +
	"\tnode_name\x18\x05 \x01(\tR\bnodeName\"X\n" +
	"\bGeoPoint\x12\x12\n" +
	"\x04zoom\x18\x01 \x01(\x05R\x04zoom\x12\x1a\n" +
	"\blatitude\x18\x02 \x01(\x05R\blatitude\x12\x1c\n" +
	"\tlongitude\x18\x03 \x01(\x05R\tlongitude\"d\n" +
	"\x03Map\x12(\n" +
	"\x04home\x18\x01 \x01(\v2\x14.meshtastic.GeoPointR\x04home\x12\x14\n" +
	"\x05style\x18\x02 \x01(\tR\x05style\x12\x1d\n" +
	"\n" +
	"follow_gps\x18\x03 \x01(\bR\tfollowGps*>\n" +
	"\vCompassMode\x12\v\n" +
	"\aDYNAMIC\x10\x00\x12\x0e\n" +
	"\n" +
	"FIXED_RING\x10\x01\x12\x12\n" +
	"\x0eFREEZE_HEADING\x10\x02*%\n" +
	"\x05Theme\x12\b\n" +
	"\x04DARK\x10\x00\x12\t\n" +
	"\x05LIGHT\x10\x01\x12\a\n" +
	"\x03RED\x10\x02*\xa9\x02\n" +
	"\bLanguage\x12\v\n" +
	"\aENGLISH\x10\x00\x12\n" +
	"\n" +
	"\x06FRENCH\x10\x01\x12\n" +
	"\n" +
	"\x06GERMAN\x10\x02\x12\v\n" +
	"\aITALIAN\x10\x03\x12\x0e\n" +
	"\n" +
	"PORTUGUESE\x10\x04\x12\v\n" +
	"\aSPANISH\x10\x05\x12\v\n" +
	"\aSWEDISH\x10\x06\x12\v\n" +
	"\aFINNISH\x10\a\x12\n" +
	"\n" +
	"\x06POLISH\x10\b\x12\v\n" +
	"\aTURKISH\x10\t\x12\v\n" +
	"\aSERBIAN\x10\n" +
	"\x12\v\n" +
	"\aRUSSIAN\x10\v\x12\t\n" +
	"\x05DUTCH\x10\f\x12\t\n" +
	"\x05GREEK\x10\r\x12\r\n" +
	"\tNORWEGIAN\x10\x0e\x12\r\n" +
	"\tSLOVENIAN\x10\x0f\x12\r\n" +
	"\tUKRAINIAN\x10\x10\x12\r\n" +
	"\tBULGARIAN\x10\x11\x12\x16\n" +
	"\x12SIMPLIFIED_CHINESE\x10\x1e\x12\x17\n" +
	"\x13TRADITIONAL_CHINESE\x10\x1fBc\n" +
	"\x13com.geeksville.meshB\x0eDeviceUIProtosZ\"github.com/meshtastic/go/generated\xaa\x02\x14Meshtastic.Protobufs\xba\x02\x00b\x06proto3"

var (
	file_meshtastic_device_ui_proto_rawDescOnce sync.Once
	file_meshtastic_device_ui_proto_rawDescData []byte
)

func file_meshtastic_device_ui_proto_rawDescGZIP() []byte {
	file_meshtastic_device_ui_proto_rawDescOnce.Do(func() {
		file_meshtastic_device_ui_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_meshtastic_device_ui_proto_rawDesc), len(file_meshtastic_device_ui_proto_rawDesc)))
	})
	return file_meshtastic_device_ui_proto_rawDescData
}

var file_meshtastic_device_ui_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_meshtastic_device_ui_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_meshtastic_device_ui_proto_goTypes = []any{
	(CompassMode)(0),       // 0: meshtastic.CompassMode
	(Theme)(0),             // 1: meshtastic.Theme
	(Language)(0),          // 2: meshtastic.Language
	(*DeviceUIConfig)(nil), // 3: meshtastic.DeviceUIConfig
	(*NodeFilter)(nil),     // 4: meshtastic.NodeFilter
	(*NodeHighlight)(nil),  // 5: meshtastic.NodeHighlight
	(*GeoPoint)(nil),       // 6: meshtastic.GeoPoint
	(*Map)(nil),            // 7: meshtastic.Map
}
var file_meshtastic_device_ui_proto_depIdxs = []int32{
	1, // 0: meshtastic.DeviceUIConfig.theme:type_name -> meshtastic.Theme
	2, // 1: meshtastic.DeviceUIConfig.language:type_name -> meshtastic.Language
	4, // 2: meshtastic.DeviceUIConfig.node_filter:type_name -> meshtastic.NodeFilter
	5, // 3: meshtastic.DeviceUIConfig.node_highlight:type_name -> meshtastic.NodeHighlight
	7, // 4: meshtastic.DeviceUIConfig.map_data:type_name -> meshtastic.Map
	0, // 5: meshtastic.DeviceUIConfig.compass_mode:type_name -> meshtastic.CompassMode
	6, // 6: meshtastic.Map.home:type_name -> meshtastic.GeoPoint
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_meshtastic_device_ui_proto_init() }
func file_meshtastic_device_ui_proto_init() {
	if File_meshtastic_device_ui_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_meshtastic_device_ui_proto_rawDesc), len(file_meshtastic_device_ui_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_meshtastic_device_ui_proto_goTypes,
		DependencyIndexes: file_meshtastic_device_ui_proto_depIdxs,
		EnumInfos:         file_meshtastic_device_ui_proto_enumTypes,
		MessageInfos:      file_meshtastic_device_ui_proto_msgTypes,
	}.Build()
	File_meshtastic_device_ui_proto = out.File
	file_meshtastic_device_ui_proto_goTypes = nil
	file_meshtastic_device_ui_proto_depIdxs = nil
}
