// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: meshtastic/telemetry.proto

package generated

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Supported I2C Sensors for telemetry in Meshtastic
type TelemetrySensorType int32

const (
	// No external telemetry sensor explicitly set
	TelemetrySensorType_SENSOR_UNSET TelemetrySensorType = 0
	// High accuracy temperature, pressure, humidity
	TelemetrySensorType_BME280 TelemetrySensorType = 1
	// High accuracy temperature, pressure, humidity, and air resistance
	TelemetrySensorType_BME680 TelemetrySensorType = 2
	// Very high accuracy temperature
	TelemetrySensorType_MCP9808 TelemetrySensorType = 3
	// Moderate accuracy current and voltage
	TelemetrySensorType_INA260 TelemetrySensorType = 4
	// Moderate accuracy current and voltage
	TelemetrySensorType_INA219 TelemetrySensorType = 5
	// High accuracy temperature and pressure
	TelemetrySensorType_BMP280 TelemetrySensorType = 6
	// High accuracy temperature and humidity
	TelemetrySensorType_SHTC3 TelemetrySensorType = 7
	// High accuracy pressure
	TelemetrySensorType_LPS22 TelemetrySensorType = 8
	// 3-Axis magnetic sensor
	TelemetrySensorType_QMC6310 TelemetrySensorType = 9
	// 6-Axis inertial measurement sensor
	TelemetrySensorType_QMI8658 TelemetrySensorType = 10
	// 3-Axis magnetic sensor
	TelemetrySensorType_QMC5883L TelemetrySensorType = 11
	// High accuracy temperature and humidity
	TelemetrySensorType_SHT31 TelemetrySensorType = 12
	// PM2.5 air quality sensor
	TelemetrySensorType_PMSA003I TelemetrySensorType = 13
	// INA3221 3 Channel Voltage / Current Sensor
	TelemetrySensorType_INA3221 TelemetrySensorType = 14
	// BMP085/BMP180 High accuracy temperature and pressure (older Version of BMP280)
	TelemetrySensorType_BMP085 TelemetrySensorType = 15
	// RCWL-9620 Doppler Radar Distance Sensor, used for water level detection
	TelemetrySensorType_RCWL9620 TelemetrySensorType = 16
	// Sensirion High accuracy temperature and humidity
	TelemetrySensorType_SHT4X TelemetrySensorType = 17
	// VEML7700 high accuracy ambient light(Lux) digital 16-bit resolution sensor.
	TelemetrySensorType_VEML7700 TelemetrySensorType = 18
	// MLX90632 non-contact IR temperature sensor.
	TelemetrySensorType_MLX90632 TelemetrySensorType = 19
	// TI OPT3001 Ambient Light Sensor
	TelemetrySensorType_OPT3001 TelemetrySensorType = 20
	// Lite On LTR-390UV-01 UV Light Sensor
	TelemetrySensorType_LTR390UV TelemetrySensorType = 21
	// AMS TSL25911FN RGB Light Sensor
	TelemetrySensorType_TSL25911FN TelemetrySensorType = 22
	// AHT10 Integrated temperature and humidity sensor
	TelemetrySensorType_AHT10 TelemetrySensorType = 23
	// DFRobot Lark Weather station (temperature, humidity, pressure, wind speed and direction)
	TelemetrySensorType_DFROBOT_LARK TelemetrySensorType = 24
	// NAU7802 Scale Chip or compatible
	TelemetrySensorType_NAU7802 TelemetrySensorType = 25
	// BMP3XX High accuracy temperature and pressure
	TelemetrySensorType_BMP3XX TelemetrySensorType = 26
	// ICM-20948 9-Axis digital motion processor
	TelemetrySensorType_ICM20948 TelemetrySensorType = 27
	// MAX17048 1S lipo battery sensor (voltage, state of charge, time to go)
	TelemetrySensorType_MAX17048 TelemetrySensorType = 28
	// Custom I2C sensor implementation based on https://github.com/meshtastic/i2c-sensor
	TelemetrySensorType_CUSTOM_SENSOR TelemetrySensorType = 29
	// MAX30102 Pulse Oximeter and Heart-Rate Sensor
	TelemetrySensorType_MAX30102 TelemetrySensorType = 30
	// MLX90614 non-contact IR temperature sensor
	TelemetrySensorType_MLX90614 TelemetrySensorType = 31
	// SCD40/SCD41 CO2, humidity, temperature sensor
	TelemetrySensorType_SCD4X TelemetrySensorType = 32
	// ClimateGuard RadSens, radiation, Geiger-Muller Tube
	TelemetrySensorType_RADSENS TelemetrySensorType = 33
	// High accuracy current and voltage
	TelemetrySensorType_INA226 TelemetrySensorType = 34
	// DFRobot Gravity tipping bucket rain gauge
	TelemetrySensorType_DFROBOT_RAIN TelemetrySensorType = 35
	// Infineon DPS310 High accuracy pressure and temperature
	TelemetrySensorType_DPS310 TelemetrySensorType = 36
	// RAKWireless RAK12035 Soil Moisture Sensor Module
	TelemetrySensorType_RAK12035 TelemetrySensorType = 37
	// MAX17261 lipo battery gauge
	TelemetrySensorType_MAX17261 TelemetrySensorType = 38
	// PCT2075 Temperature Sensor
	TelemetrySensorType_PCT2075 TelemetrySensorType = 39
	// ADS1X15 ADC
	TelemetrySensorType_ADS1X15 TelemetrySensorType = 40
)

// Enum value maps for TelemetrySensorType.
var (
	TelemetrySensorType_name = map[int32]string{
		0:  "SENSOR_UNSET",
		1:  "BME280",
		2:  "BME680",
		3:  "MCP9808",
		4:  "INA260",
		5:  "INA219",
		6:  "BMP280",
		7:  "SHTC3",
		8:  "LPS22",
		9:  "QMC6310",
		10: "QMI8658",
		11: "QMC5883L",
		12: "SHT31",
		13: "PMSA003I",
		14: "INA3221",
		15: "BMP085",
		16: "RCWL9620",
		17: "SHT4X",
		18: "VEML7700",
		19: "MLX90632",
		20: "OPT3001",
		21: "LTR390UV",
		22: "TSL25911FN",
		23: "AHT10",
		24: "DFROBOT_LARK",
		25: "NAU7802",
		26: "BMP3XX",
		27: "ICM20948",
		28: "MAX17048",
		29: "CUSTOM_SENSOR",
		30: "MAX30102",
		31: "MLX90614",
		32: "SCD4X",
		33: "RADSENS",
		34: "INA226",
		35: "DFROBOT_RAIN",
		36: "DPS310",
		37: "RAK12035",
		38: "MAX17261",
		39: "PCT2075",
		40: "ADS1X15",
	}
	TelemetrySensorType_value = map[string]int32{
		"SENSOR_UNSET":  0,
		"BME280":        1,
		"BME680":        2,
		"MCP9808":       3,
		"INA260":        4,
		"INA219":        5,
		"BMP280":        6,
		"SHTC3":         7,
		"LPS22":         8,
		"QMC6310":       9,
		"QMI8658":       10,
		"QMC5883L":      11,
		"SHT31":         12,
		"PMSA003I":      13,
		"INA3221":       14,
		"BMP085":        15,
		"RCWL9620":      16,
		"SHT4X":         17,
		"VEML7700":      18,
		"MLX90632":      19,
		"OPT3001":       20,
		"LTR390UV":      21,
		"TSL25911FN":    22,
		"AHT10":         23,
		"DFROBOT_LARK":  24,
		"NAU7802":       25,
		"BMP3XX":        26,
		"ICM20948":      27,
		"MAX17048":      28,
		"CUSTOM_SENSOR": 29,
		"MAX30102":      30,
		"MLX90614":      31,
		"SCD4X":         32,
		"RADSENS":       33,
		"INA226":        34,
		"DFROBOT_RAIN":  35,
		"DPS310":        36,
		"RAK12035":      37,
		"MAX17261":      38,
		"PCT2075":       39,
		"ADS1X15":       40,
	}
)

func (x TelemetrySensorType) Enum() *TelemetrySensorType {
	p := new(TelemetrySensorType)
	*p = x
	return p
}

func (x TelemetrySensorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TelemetrySensorType) Descriptor() protoreflect.EnumDescriptor {
	return file_meshtastic_telemetry_proto_enumTypes[0].Descriptor()
}

func (TelemetrySensorType) Type() protoreflect.EnumType {
	return &file_meshtastic_telemetry_proto_enumTypes[0]
}

func (x TelemetrySensorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TelemetrySensorType.Descriptor instead.
func (TelemetrySensorType) EnumDescriptor() ([]byte, []int) {
	return file_meshtastic_telemetry_proto_rawDescGZIP(), []int{0}
}

// Key native device metrics such as battery level
type DeviceMetrics struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 0-100 (>100 means powered)
	BatteryLevel *uint32 `protobuf:"varint,1,opt,name=battery_level,json=batteryLevel,proto3,oneof" json:"battery_level,omitempty"`
	// Voltage measured
	Voltage *float32 `protobuf:"fixed32,2,opt,name=voltage,proto3,oneof" json:"voltage,omitempty"`
	// Utilization for the current channel, including well formed TX, RX and malformed RX (aka noise).
	ChannelUtilization *float32 `protobuf:"fixed32,3,opt,name=channel_utilization,json=channelUtilization,proto3,oneof" json:"channel_utilization,omitempty"`
	// Percent of airtime for transmission used within the last hour.
	AirUtilTx *float32 `protobuf:"fixed32,4,opt,name=air_util_tx,json=airUtilTx,proto3,oneof" json:"air_util_tx,omitempty"`
	// How long the device has been running since the last reboot (in seconds)
	UptimeSeconds *uint32 `protobuf:"varint,5,opt,name=uptime_seconds,json=uptimeSeconds,proto3,oneof" json:"uptime_seconds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeviceMetrics) Reset() {
	*x = DeviceMetrics{}
	mi := &file_meshtastic_telemetry_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceMetrics) ProtoMessage() {}

func (x *DeviceMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_telemetry_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceMetrics.ProtoReflect.Descriptor instead.
func (*DeviceMetrics) Descriptor() ([]byte, []int) {
	return file_meshtastic_telemetry_proto_rawDescGZIP(), []int{0}
}

func (x *DeviceMetrics) GetBatteryLevel() uint32 {
	if x != nil && x.BatteryLevel != nil {
		return *x.BatteryLevel
	}
	return 0
}

func (x *DeviceMetrics) GetVoltage() float32 {
	if x != nil && x.Voltage != nil {
		return *x.Voltage
	}
	return 0
}

func (x *DeviceMetrics) GetChannelUtilization() float32 {
	if x != nil && x.ChannelUtilization != nil {
		return *x.ChannelUtilization
	}
	return 0
}

func (x *DeviceMetrics) GetAirUtilTx() float32 {
	if x != nil && x.AirUtilTx != nil {
		return *x.AirUtilTx
	}
	return 0
}

func (x *DeviceMetrics) GetUptimeSeconds() uint32 {
	if x != nil && x.UptimeSeconds != nil {
		return *x.UptimeSeconds
	}
	return 0
}

// Weather station or other environmental metrics
type EnvironmentMetrics struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Temperature measured
	Temperature *float32 `protobuf:"fixed32,1,opt,name=temperature,proto3,oneof" json:"temperature,omitempty"`
	// Relative humidity percent measured
	RelativeHumidity *float32 `protobuf:"fixed32,2,opt,name=relative_humidity,json=relativeHumidity,proto3,oneof" json:"relative_humidity,omitempty"`
	// Barometric pressure in hPA measured
	BarometricPressure *float32 `protobuf:"fixed32,3,opt,name=barometric_pressure,json=barometricPressure,proto3,oneof" json:"barometric_pressure,omitempty"`
	// Gas resistance in MOhm measured
	GasResistance *float32 `protobuf:"fixed32,4,opt,name=gas_resistance,json=gasResistance,proto3,oneof" json:"gas_resistance,omitempty"`
	// Voltage measured (To be depreciated in favor of PowerMetrics in Meshtastic 3.x)
	Voltage *float32 `protobuf:"fixed32,5,opt,name=voltage,proto3,oneof" json:"voltage,omitempty"`
	// Current measured (To be depreciated in favor of PowerMetrics in Meshtastic 3.x)
	Current *float32 `protobuf:"fixed32,6,opt,name=current,proto3,oneof" json:"current,omitempty"`
	// relative scale IAQ value as measured by Bosch BME680 . value 0-500.
	// Belongs to Air Quality but is not particle but VOC measurement. Other VOC values can also be put in here.
	Iaq *uint32 `protobuf:"varint,7,opt,name=iaq,proto3,oneof" json:"iaq,omitempty"`
	// RCWL9620 Doppler Radar Distance Sensor, used for water level detection. Float value in mm.
	Distance *float32 `protobuf:"fixed32,8,opt,name=distance,proto3,oneof" json:"distance,omitempty"`
	// VEML7700 high accuracy ambient light(Lux) digital 16-bit resolution sensor.
	Lux *float32 `protobuf:"fixed32,9,opt,name=lux,proto3,oneof" json:"lux,omitempty"`
	// VEML7700 high accuracy white light(irradiance) not calibrated digital 16-bit resolution sensor.
	WhiteLux *float32 `protobuf:"fixed32,10,opt,name=white_lux,json=whiteLux,proto3,oneof" json:"white_lux,omitempty"`
	// Infrared lux
	IrLux *float32 `protobuf:"fixed32,11,opt,name=ir_lux,json=irLux,proto3,oneof" json:"ir_lux,omitempty"`
	// Ultraviolet lux
	UvLux *float32 `protobuf:"fixed32,12,opt,name=uv_lux,json=uvLux,proto3,oneof" json:"uv_lux,omitempty"`
	// Wind direction in degrees
	// 0 degrees = North, 90 = East, etc...
	WindDirection *uint32 `protobuf:"varint,13,opt,name=wind_direction,json=windDirection,proto3,oneof" json:"wind_direction,omitempty"`
	// Wind speed in m/s
	WindSpeed *float32 `protobuf:"fixed32,14,opt,name=wind_speed,json=windSpeed,proto3,oneof" json:"wind_speed,omitempty"`
	// Weight in KG
	Weight *float32 `protobuf:"fixed32,15,opt,name=weight,proto3,oneof" json:"weight,omitempty"`
	// Wind gust in m/s
	WindGust *float32 `protobuf:"fixed32,16,opt,name=wind_gust,json=windGust,proto3,oneof" json:"wind_gust,omitempty"`
	// Wind lull in m/s
	WindLull *float32 `protobuf:"fixed32,17,opt,name=wind_lull,json=windLull,proto3,oneof" json:"wind_lull,omitempty"`
	// Radiation in µR/h
	Radiation *float32 `protobuf:"fixed32,18,opt,name=radiation,proto3,oneof" json:"radiation,omitempty"`
	// Rainfall in the last hour in mm
	Rainfall_1H *float32 `protobuf:"fixed32,19,opt,name=rainfall_1h,json=rainfall1h,proto3,oneof" json:"rainfall_1h,omitempty"`
	// Rainfall in the last 24 hours in mm
	Rainfall_24H *float32 `protobuf:"fixed32,20,opt,name=rainfall_24h,json=rainfall24h,proto3,oneof" json:"rainfall_24h,omitempty"`
	// Soil moisture measured (% 1-100)
	SoilMoisture *uint32 `protobuf:"varint,21,opt,name=soil_moisture,json=soilMoisture,proto3,oneof" json:"soil_moisture,omitempty"`
	// Soil temperature measured (*C)
	SoilTemperature *float32 `protobuf:"fixed32,22,opt,name=soil_temperature,json=soilTemperature,proto3,oneof" json:"soil_temperature,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *EnvironmentMetrics) Reset() {
	*x = EnvironmentMetrics{}
	mi := &file_meshtastic_telemetry_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvironmentMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentMetrics) ProtoMessage() {}

func (x *EnvironmentMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_telemetry_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentMetrics.ProtoReflect.Descriptor instead.
func (*EnvironmentMetrics) Descriptor() ([]byte, []int) {
	return file_meshtastic_telemetry_proto_rawDescGZIP(), []int{1}
}

func (x *EnvironmentMetrics) GetTemperature() float32 {
	if x != nil && x.Temperature != nil {
		return *x.Temperature
	}
	return 0
}

func (x *EnvironmentMetrics) GetRelativeHumidity() float32 {
	if x != nil && x.RelativeHumidity != nil {
		return *x.RelativeHumidity
	}
	return 0
}

func (x *EnvironmentMetrics) GetBarometricPressure() float32 {
	if x != nil && x.BarometricPressure != nil {
		return *x.BarometricPressure
	}
	return 0
}

func (x *EnvironmentMetrics) GetGasResistance() float32 {
	if x != nil && x.GasResistance != nil {
		return *x.GasResistance
	}
	return 0
}

func (x *EnvironmentMetrics) GetVoltage() float32 {
	if x != nil && x.Voltage != nil {
		return *x.Voltage
	}
	return 0
}

func (x *EnvironmentMetrics) GetCurrent() float32 {
	if x != nil && x.Current != nil {
		return *x.Current
	}
	return 0
}

func (x *EnvironmentMetrics) GetIaq() uint32 {
	if x != nil && x.Iaq != nil {
		return *x.Iaq
	}
	return 0
}

func (x *EnvironmentMetrics) GetDistance() float32 {
	if x != nil && x.Distance != nil {
		return *x.Distance
	}
	return 0
}

func (x *EnvironmentMetrics) GetLux() float32 {
	if x != nil && x.Lux != nil {
		return *x.Lux
	}
	return 0
}

func (x *EnvironmentMetrics) GetWhiteLux() float32 {
	if x != nil && x.WhiteLux != nil {
		return *x.WhiteLux
	}
	return 0
}

func (x *EnvironmentMetrics) GetIrLux() float32 {
	if x != nil && x.IrLux != nil {
		return *x.IrLux
	}
	return 0
}

func (x *EnvironmentMetrics) GetUvLux() float32 {
	if x != nil && x.UvLux != nil {
		return *x.UvLux
	}
	return 0
}

func (x *EnvironmentMetrics) GetWindDirection() uint32 {
	if x != nil && x.WindDirection != nil {
		return *x.WindDirection
	}
	return 0
}

func (x *EnvironmentMetrics) GetWindSpeed() float32 {
	if x != nil && x.WindSpeed != nil {
		return *x.WindSpeed
	}
	return 0
}

func (x *EnvironmentMetrics) GetWeight() float32 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *EnvironmentMetrics) GetWindGust() float32 {
	if x != nil && x.WindGust != nil {
		return *x.WindGust
	}
	return 0
}

func (x *EnvironmentMetrics) GetWindLull() float32 {
	if x != nil && x.WindLull != nil {
		return *x.WindLull
	}
	return 0
}

func (x *EnvironmentMetrics) GetRadiation() float32 {
	if x != nil && x.Radiation != nil {
		return *x.Radiation
	}
	return 0
}

func (x *EnvironmentMetrics) GetRainfall_1H() float32 {
	if x != nil && x.Rainfall_1H != nil {
		return *x.Rainfall_1H
	}
	return 0
}

func (x *EnvironmentMetrics) GetRainfall_24H() float32 {
	if x != nil && x.Rainfall_24H != nil {
		return *x.Rainfall_24H
	}
	return 0
}

func (x *EnvironmentMetrics) GetSoilMoisture() uint32 {
	if x != nil && x.SoilMoisture != nil {
		return *x.SoilMoisture
	}
	return 0
}

func (x *EnvironmentMetrics) GetSoilTemperature() float32 {
	if x != nil && x.SoilTemperature != nil {
		return *x.SoilTemperature
	}
	return 0
}

// Power Metrics (voltage / current / etc)
type PowerMetrics struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Voltage (Ch1)
	Ch1Voltage *float32 `protobuf:"fixed32,1,opt,name=ch1_voltage,json=ch1Voltage,proto3,oneof" json:"ch1_voltage,omitempty"`
	// Current (Ch1)
	Ch1Current *float32 `protobuf:"fixed32,2,opt,name=ch1_current,json=ch1Current,proto3,oneof" json:"ch1_current,omitempty"`
	// Voltage (Ch2)
	Ch2Voltage *float32 `protobuf:"fixed32,3,opt,name=ch2_voltage,json=ch2Voltage,proto3,oneof" json:"ch2_voltage,omitempty"`
	// Current (Ch2)
	Ch2Current *float32 `protobuf:"fixed32,4,opt,name=ch2_current,json=ch2Current,proto3,oneof" json:"ch2_current,omitempty"`
	// Voltage (Ch3)
	Ch3Voltage *float32 `protobuf:"fixed32,5,opt,name=ch3_voltage,json=ch3Voltage,proto3,oneof" json:"ch3_voltage,omitempty"`
	// Current (Ch3)
	Ch3Current *float32 `protobuf:"fixed32,6,opt,name=ch3_current,json=ch3Current,proto3,oneof" json:"ch3_current,omitempty"`
	// Voltage (Ch4)
	Ch4Voltage *float32 `protobuf:"fixed32,7,opt,name=ch4_voltage,json=ch4Voltage,proto3,oneof" json:"ch4_voltage,omitempty"`
	// Current (Ch4)
	Ch4Current *float32 `protobuf:"fixed32,8,opt,name=ch4_current,json=ch4Current,proto3,oneof" json:"ch4_current,omitempty"`
	// Voltage (Ch5)
	Ch5Voltage *float32 `protobuf:"fixed32,9,opt,name=ch5_voltage,json=ch5Voltage,proto3,oneof" json:"ch5_voltage,omitempty"`
	// Current (Ch5)
	Ch5Current *float32 `protobuf:"fixed32,10,opt,name=ch5_current,json=ch5Current,proto3,oneof" json:"ch5_current,omitempty"`
	// Voltage (Ch6)
	Ch6Voltage *float32 `protobuf:"fixed32,11,opt,name=ch6_voltage,json=ch6Voltage,proto3,oneof" json:"ch6_voltage,omitempty"`
	// Current (Ch6)
	Ch6Current *float32 `protobuf:"fixed32,12,opt,name=ch6_current,json=ch6Current,proto3,oneof" json:"ch6_current,omitempty"`
	// Voltage (Ch7)
	Ch7Voltage *float32 `protobuf:"fixed32,13,opt,name=ch7_voltage,json=ch7Voltage,proto3,oneof" json:"ch7_voltage,omitempty"`
	// Current (Ch7)
	Ch7Current *float32 `protobuf:"fixed32,14,opt,name=ch7_current,json=ch7Current,proto3,oneof" json:"ch7_current,omitempty"`
	// Voltage (Ch8)
	Ch8Voltage *float32 `protobuf:"fixed32,15,opt,name=ch8_voltage,json=ch8Voltage,proto3,oneof" json:"ch8_voltage,omitempty"`
	// Current (Ch8)
	Ch8Current    *float32 `protobuf:"fixed32,16,opt,name=ch8_current,json=ch8Current,proto3,oneof" json:"ch8_current,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PowerMetrics) Reset() {
	*x = PowerMetrics{}
	mi := &file_meshtastic_telemetry_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PowerMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerMetrics) ProtoMessage() {}

func (x *PowerMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_telemetry_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerMetrics.ProtoReflect.Descriptor instead.
func (*PowerMetrics) Descriptor() ([]byte, []int) {
	return file_meshtastic_telemetry_proto_rawDescGZIP(), []int{2}
}

func (x *PowerMetrics) GetCh1Voltage() float32 {
	if x != nil && x.Ch1Voltage != nil {
		return *x.Ch1Voltage
	}
	return 0
}

func (x *PowerMetrics) GetCh1Current() float32 {
	if x != nil && x.Ch1Current != nil {
		return *x.Ch1Current
	}
	return 0
}

func (x *PowerMetrics) GetCh2Voltage() float32 {
	if x != nil && x.Ch2Voltage != nil {
		return *x.Ch2Voltage
	}
	return 0
}

func (x *PowerMetrics) GetCh2Current() float32 {
	if x != nil && x.Ch2Current != nil {
		return *x.Ch2Current
	}
	return 0
}

func (x *PowerMetrics) GetCh3Voltage() float32 {
	if x != nil && x.Ch3Voltage != nil {
		return *x.Ch3Voltage
	}
	return 0
}

func (x *PowerMetrics) GetCh3Current() float32 {
	if x != nil && x.Ch3Current != nil {
		return *x.Ch3Current
	}
	return 0
}

func (x *PowerMetrics) GetCh4Voltage() float32 {
	if x != nil && x.Ch4Voltage != nil {
		return *x.Ch4Voltage
	}
	return 0
}

func (x *PowerMetrics) GetCh4Current() float32 {
	if x != nil && x.Ch4Current != nil {
		return *x.Ch4Current
	}
	return 0
}

func (x *PowerMetrics) GetCh5Voltage() float32 {
	if x != nil && x.Ch5Voltage != nil {
		return *x.Ch5Voltage
	}
	return 0
}

func (x *PowerMetrics) GetCh5Current() float32 {
	if x != nil && x.Ch5Current != nil {
		return *x.Ch5Current
	}
	return 0
}

func (x *PowerMetrics) GetCh6Voltage() float32 {
	if x != nil && x.Ch6Voltage != nil {
		return *x.Ch6Voltage
	}
	return 0
}

func (x *PowerMetrics) GetCh6Current() float32 {
	if x != nil && x.Ch6Current != nil {
		return *x.Ch6Current
	}
	return 0
}

func (x *PowerMetrics) GetCh7Voltage() float32 {
	if x != nil && x.Ch7Voltage != nil {
		return *x.Ch7Voltage
	}
	return 0
}

func (x *PowerMetrics) GetCh7Current() float32 {
	if x != nil && x.Ch7Current != nil {
		return *x.Ch7Current
	}
	return 0
}

func (x *PowerMetrics) GetCh8Voltage() float32 {
	if x != nil && x.Ch8Voltage != nil {
		return *x.Ch8Voltage
	}
	return 0
}

func (x *PowerMetrics) GetCh8Current() float32 {
	if x != nil && x.Ch8Current != nil {
		return *x.Ch8Current
	}
	return 0
}

// Air quality metrics
type AirQualityMetrics struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Concentration Units Standard PM1.0
	Pm10Standard *uint32 `protobuf:"varint,1,opt,name=pm10_standard,json=pm10Standard,proto3,oneof" json:"pm10_standard,omitempty"`
	// Concentration Units Standard PM2.5
	Pm25Standard *uint32 `protobuf:"varint,2,opt,name=pm25_standard,json=pm25Standard,proto3,oneof" json:"pm25_standard,omitempty"`
	// Concentration Units Standard PM10.0
	Pm100Standard *uint32 `protobuf:"varint,3,opt,name=pm100_standard,json=pm100Standard,proto3,oneof" json:"pm100_standard,omitempty"`
	// Concentration Units Environmental PM1.0
	Pm10Environmental *uint32 `protobuf:"varint,4,opt,name=pm10_environmental,json=pm10Environmental,proto3,oneof" json:"pm10_environmental,omitempty"`
	// Concentration Units Environmental PM2.5
	Pm25Environmental *uint32 `protobuf:"varint,5,opt,name=pm25_environmental,json=pm25Environmental,proto3,oneof" json:"pm25_environmental,omitempty"`
	// Concentration Units Environmental PM10.0
	Pm100Environmental *uint32 `protobuf:"varint,6,opt,name=pm100_environmental,json=pm100Environmental,proto3,oneof" json:"pm100_environmental,omitempty"`
	// 0.3um Particle Count
	Particles_03Um *uint32 `protobuf:"varint,7,opt,name=particles_03um,json=particles03um,proto3,oneof" json:"particles_03um,omitempty"`
	// 0.5um Particle Count
	Particles_05Um *uint32 `protobuf:"varint,8,opt,name=particles_05um,json=particles05um,proto3,oneof" json:"particles_05um,omitempty"`
	// 1.0um Particle Count
	Particles_10Um *uint32 `protobuf:"varint,9,opt,name=particles_10um,json=particles10um,proto3,oneof" json:"particles_10um,omitempty"`
	// 2.5um Particle Count
	Particles_25Um *uint32 `protobuf:"varint,10,opt,name=particles_25um,json=particles25um,proto3,oneof" json:"particles_25um,omitempty"`
	// 5.0um Particle Count
	Particles_50Um *uint32 `protobuf:"varint,11,opt,name=particles_50um,json=particles50um,proto3,oneof" json:"particles_50um,omitempty"`
	// 10.0um Particle Count
	Particles_100Um *uint32 `protobuf:"varint,12,opt,name=particles_100um,json=particles100um,proto3,oneof" json:"particles_100um,omitempty"`
	// CO2 concentration in ppm
	Co2 *uint32 `protobuf:"varint,13,opt,name=co2,proto3,oneof" json:"co2,omitempty"`
	// CO2 sensor temperature in degC
	Co2Temperature *float32 `protobuf:"fixed32,14,opt,name=co2_temperature,json=co2Temperature,proto3,oneof" json:"co2_temperature,omitempty"`
	// CO2 sensor relative humidity in %
	Co2Humidity   *float32 `protobuf:"fixed32,15,opt,name=co2_humidity,json=co2Humidity,proto3,oneof" json:"co2_humidity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AirQualityMetrics) Reset() {
	*x = AirQualityMetrics{}
	mi := &file_meshtastic_telemetry_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AirQualityMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirQualityMetrics) ProtoMessage() {}

func (x *AirQualityMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_telemetry_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirQualityMetrics.ProtoReflect.Descriptor instead.
func (*AirQualityMetrics) Descriptor() ([]byte, []int) {
	return file_meshtastic_telemetry_proto_rawDescGZIP(), []int{3}
}

func (x *AirQualityMetrics) GetPm10Standard() uint32 {
	if x != nil && x.Pm10Standard != nil {
		return *x.Pm10Standard
	}
	return 0
}

func (x *AirQualityMetrics) GetPm25Standard() uint32 {
	if x != nil && x.Pm25Standard != nil {
		return *x.Pm25Standard
	}
	return 0
}

func (x *AirQualityMetrics) GetPm100Standard() uint32 {
	if x != nil && x.Pm100Standard != nil {
		return *x.Pm100Standard
	}
	return 0
}

func (x *AirQualityMetrics) GetPm10Environmental() uint32 {
	if x != nil && x.Pm10Environmental != nil {
		return *x.Pm10Environmental
	}
	return 0
}

func (x *AirQualityMetrics) GetPm25Environmental() uint32 {
	if x != nil && x.Pm25Environmental != nil {
		return *x.Pm25Environmental
	}
	return 0
}

func (x *AirQualityMetrics) GetPm100Environmental() uint32 {
	if x != nil && x.Pm100Environmental != nil {
		return *x.Pm100Environmental
	}
	return 0
}

func (x *AirQualityMetrics) GetParticles_03Um() uint32 {
	if x != nil && x.Particles_03Um != nil {
		return *x.Particles_03Um
	}
	return 0
}

func (x *AirQualityMetrics) GetParticles_05Um() uint32 {
	if x != nil && x.Particles_05Um != nil {
		return *x.Particles_05Um
	}
	return 0
}

func (x *AirQualityMetrics) GetParticles_10Um() uint32 {
	if x != nil && x.Particles_10Um != nil {
		return *x.Particles_10Um
	}
	return 0
}

func (x *AirQualityMetrics) GetParticles_25Um() uint32 {
	if x != nil && x.Particles_25Um != nil {
		return *x.Particles_25Um
	}
	return 0
}

func (x *AirQualityMetrics) GetParticles_50Um() uint32 {
	if x != nil && x.Particles_50Um != nil {
		return *x.Particles_50Um
	}
	return 0
}

func (x *AirQualityMetrics) GetParticles_100Um() uint32 {
	if x != nil && x.Particles_100Um != nil {
		return *x.Particles_100Um
	}
	return 0
}

func (x *AirQualityMetrics) GetCo2() uint32 {
	if x != nil && x.Co2 != nil {
		return *x.Co2
	}
	return 0
}

func (x *AirQualityMetrics) GetCo2Temperature() float32 {
	if x != nil && x.Co2Temperature != nil {
		return *x.Co2Temperature
	}
	return 0
}

func (x *AirQualityMetrics) GetCo2Humidity() float32 {
	if x != nil && x.Co2Humidity != nil {
		return *x.Co2Humidity
	}
	return 0
}

// Local device mesh statistics
type LocalStats struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// How long the device has been running since the last reboot (in seconds)
	UptimeSeconds uint32 `protobuf:"varint,1,opt,name=uptime_seconds,json=uptimeSeconds,proto3" json:"uptime_seconds,omitempty"`
	// Utilization for the current channel, including well formed TX, RX and malformed RX (aka noise).
	ChannelUtilization float32 `protobuf:"fixed32,2,opt,name=channel_utilization,json=channelUtilization,proto3" json:"channel_utilization,omitempty"`
	// Percent of airtime for transmission used within the last hour.
	AirUtilTx float32 `protobuf:"fixed32,3,opt,name=air_util_tx,json=airUtilTx,proto3" json:"air_util_tx,omitempty"`
	// Number of packets sent
	NumPacketsTx uint32 `protobuf:"varint,4,opt,name=num_packets_tx,json=numPacketsTx,proto3" json:"num_packets_tx,omitempty"`
	// Number of packets received (both good and bad)
	NumPacketsRx uint32 `protobuf:"varint,5,opt,name=num_packets_rx,json=numPacketsRx,proto3" json:"num_packets_rx,omitempty"`
	// Number of packets received that are malformed or violate the protocol
	NumPacketsRxBad uint32 `protobuf:"varint,6,opt,name=num_packets_rx_bad,json=numPacketsRxBad,proto3" json:"num_packets_rx_bad,omitempty"`
	// Number of nodes online (in the past 2 hours)
	NumOnlineNodes uint32 `protobuf:"varint,7,opt,name=num_online_nodes,json=numOnlineNodes,proto3" json:"num_online_nodes,omitempty"`
	// Number of nodes total
	NumTotalNodes uint32 `protobuf:"varint,8,opt,name=num_total_nodes,json=numTotalNodes,proto3" json:"num_total_nodes,omitempty"`
	// Number of received packets that were duplicates (due to multiple nodes relaying).
	// If this number is high, there are nodes in the mesh relaying packets when it's unnecessary, for example due to the ROUTER/REPEATER role.
	NumRxDupe uint32 `protobuf:"varint,9,opt,name=num_rx_dupe,json=numRxDupe,proto3" json:"num_rx_dupe,omitempty"`
	// Number of packets we transmitted that were a relay for others (not originating from ourselves).
	NumTxRelay uint32 `protobuf:"varint,10,opt,name=num_tx_relay,json=numTxRelay,proto3" json:"num_tx_relay,omitempty"`
	// Number of times we canceled a packet to be relayed, because someone else did it before us.
	// This will always be zero for ROUTERs/REPEATERs. If this number is high, some other node(s) is/are relaying faster than you.
	NumTxRelayCanceled uint32 `protobuf:"varint,11,opt,name=num_tx_relay_canceled,json=numTxRelayCanceled,proto3" json:"num_tx_relay_canceled,omitempty"`
	// Number of bytes used in the heap
	HeapTotalBytes uint32 `protobuf:"varint,12,opt,name=heap_total_bytes,json=heapTotalBytes,proto3" json:"heap_total_bytes,omitempty"`
	// Number of bytes free in the heap
	HeapFreeBytes uint32 `protobuf:"varint,13,opt,name=heap_free_bytes,json=heapFreeBytes,proto3" json:"heap_free_bytes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LocalStats) Reset() {
	*x = LocalStats{}
	mi := &file_meshtastic_telemetry_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocalStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalStats) ProtoMessage() {}

func (x *LocalStats) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_telemetry_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalStats.ProtoReflect.Descriptor instead.
func (*LocalStats) Descriptor() ([]byte, []int) {
	return file_meshtastic_telemetry_proto_rawDescGZIP(), []int{4}
}

func (x *LocalStats) GetUptimeSeconds() uint32 {
	if x != nil {
		return x.UptimeSeconds
	}
	return 0
}

func (x *LocalStats) GetChannelUtilization() float32 {
	if x != nil {
		return x.ChannelUtilization
	}
	return 0
}

func (x *LocalStats) GetAirUtilTx() float32 {
	if x != nil {
		return x.AirUtilTx
	}
	return 0
}

func (x *LocalStats) GetNumPacketsTx() uint32 {
	if x != nil {
		return x.NumPacketsTx
	}
	return 0
}

func (x *LocalStats) GetNumPacketsRx() uint32 {
	if x != nil {
		return x.NumPacketsRx
	}
	return 0
}

func (x *LocalStats) GetNumPacketsRxBad() uint32 {
	if x != nil {
		return x.NumPacketsRxBad
	}
	return 0
}

func (x *LocalStats) GetNumOnlineNodes() uint32 {
	if x != nil {
		return x.NumOnlineNodes
	}
	return 0
}

func (x *LocalStats) GetNumTotalNodes() uint32 {
	if x != nil {
		return x.NumTotalNodes
	}
	return 0
}

func (x *LocalStats) GetNumRxDupe() uint32 {
	if x != nil {
		return x.NumRxDupe
	}
	return 0
}

func (x *LocalStats) GetNumTxRelay() uint32 {
	if x != nil {
		return x.NumTxRelay
	}
	return 0
}

func (x *LocalStats) GetNumTxRelayCanceled() uint32 {
	if x != nil {
		return x.NumTxRelayCanceled
	}
	return 0
}

func (x *LocalStats) GetHeapTotalBytes() uint32 {
	if x != nil {
		return x.HeapTotalBytes
	}
	return 0
}

func (x *LocalStats) GetHeapFreeBytes() uint32 {
	if x != nil {
		return x.HeapFreeBytes
	}
	return 0
}

// Health telemetry metrics
type HealthMetrics struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Heart rate (beats per minute)
	HeartBpm *uint32 `protobuf:"varint,1,opt,name=heart_bpm,json=heartBpm,proto3,oneof" json:"heart_bpm,omitempty"`
	// SpO2 (blood oxygen saturation) level
	SpO2 *uint32 `protobuf:"varint,2,opt,name=spO2,proto3,oneof" json:"spO2,omitempty"`
	// Body temperature in degrees Celsius
	Temperature   *float32 `protobuf:"fixed32,3,opt,name=temperature,proto3,oneof" json:"temperature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthMetrics) Reset() {
	*x = HealthMetrics{}
	mi := &file_meshtastic_telemetry_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthMetrics) ProtoMessage() {}

func (x *HealthMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_telemetry_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthMetrics.ProtoReflect.Descriptor instead.
func (*HealthMetrics) Descriptor() ([]byte, []int) {
	return file_meshtastic_telemetry_proto_rawDescGZIP(), []int{5}
}

func (x *HealthMetrics) GetHeartBpm() uint32 {
	if x != nil && x.HeartBpm != nil {
		return *x.HeartBpm
	}
	return 0
}

func (x *HealthMetrics) GetSpO2() uint32 {
	if x != nil && x.SpO2 != nil {
		return *x.SpO2
	}
	return 0
}

func (x *HealthMetrics) GetTemperature() float32 {
	if x != nil && x.Temperature != nil {
		return *x.Temperature
	}
	return 0
}

// Linux host metrics
type HostMetrics struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Host system uptime
	UptimeSeconds uint32 `protobuf:"varint,1,opt,name=uptime_seconds,json=uptimeSeconds,proto3" json:"uptime_seconds,omitempty"`
	// Host system free memory
	FreememBytes uint64 `protobuf:"varint,2,opt,name=freemem_bytes,json=freememBytes,proto3" json:"freemem_bytes,omitempty"`
	// Host system disk space free for /
	Diskfree1Bytes uint64 `protobuf:"varint,3,opt,name=diskfree1_bytes,json=diskfree1Bytes,proto3" json:"diskfree1_bytes,omitempty"`
	// Secondary system disk space free
	Diskfree2Bytes *uint64 `protobuf:"varint,4,opt,name=diskfree2_bytes,json=diskfree2Bytes,proto3,oneof" json:"diskfree2_bytes,omitempty"`
	// Tertiary disk space free
	Diskfree3Bytes *uint64 `protobuf:"varint,5,opt,name=diskfree3_bytes,json=diskfree3Bytes,proto3,oneof" json:"diskfree3_bytes,omitempty"`
	// Host system one minute load in 1/100ths
	Load1 uint32 `protobuf:"varint,6,opt,name=load1,proto3" json:"load1,omitempty"`
	// Host system five minute load  in 1/100ths
	Load5 uint32 `protobuf:"varint,7,opt,name=load5,proto3" json:"load5,omitempty"`
	// Host system fifteen minute load  in 1/100ths
	Load15 uint32 `protobuf:"varint,8,opt,name=load15,proto3" json:"load15,omitempty"`
	// Optional User-provided string for arbitrary host system information
	// that doesn't make sense as a dedicated entry.
	UserString    *string `protobuf:"bytes,9,opt,name=user_string,json=userString,proto3,oneof" json:"user_string,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HostMetrics) Reset() {
	*x = HostMetrics{}
	mi := &file_meshtastic_telemetry_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostMetrics) ProtoMessage() {}

func (x *HostMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_telemetry_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostMetrics.ProtoReflect.Descriptor instead.
func (*HostMetrics) Descriptor() ([]byte, []int) {
	return file_meshtastic_telemetry_proto_rawDescGZIP(), []int{6}
}

func (x *HostMetrics) GetUptimeSeconds() uint32 {
	if x != nil {
		return x.UptimeSeconds
	}
	return 0
}

func (x *HostMetrics) GetFreememBytes() uint64 {
	if x != nil {
		return x.FreememBytes
	}
	return 0
}

func (x *HostMetrics) GetDiskfree1Bytes() uint64 {
	if x != nil {
		return x.Diskfree1Bytes
	}
	return 0
}

func (x *HostMetrics) GetDiskfree2Bytes() uint64 {
	if x != nil && x.Diskfree2Bytes != nil {
		return *x.Diskfree2Bytes
	}
	return 0
}

func (x *HostMetrics) GetDiskfree3Bytes() uint64 {
	if x != nil && x.Diskfree3Bytes != nil {
		return *x.Diskfree3Bytes
	}
	return 0
}

func (x *HostMetrics) GetLoad1() uint32 {
	if x != nil {
		return x.Load1
	}
	return 0
}

func (x *HostMetrics) GetLoad5() uint32 {
	if x != nil {
		return x.Load5
	}
	return 0
}

func (x *HostMetrics) GetLoad15() uint32 {
	if x != nil {
		return x.Load15
	}
	return 0
}

func (x *HostMetrics) GetUserString() string {
	if x != nil && x.UserString != nil {
		return *x.UserString
	}
	return ""
}

// Types of Measurements the telemetry module is equipped to handle
type Telemetry struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Seconds since 1970 - or 0 for unknown/unset
	Time uint32 `protobuf:"fixed32,1,opt,name=time,proto3" json:"time,omitempty"`
	// Types that are valid to be assigned to Variant:
	//
	//	*Telemetry_DeviceMetrics
	//	*Telemetry_EnvironmentMetrics
	//	*Telemetry_AirQualityMetrics
	//	*Telemetry_PowerMetrics
	//	*Telemetry_LocalStats
	//	*Telemetry_HealthMetrics
	//	*Telemetry_HostMetrics
	Variant       isTelemetry_Variant `protobuf_oneof:"variant"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Telemetry) Reset() {
	*x = Telemetry{}
	mi := &file_meshtastic_telemetry_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Telemetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Telemetry) ProtoMessage() {}

func (x *Telemetry) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_telemetry_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Telemetry.ProtoReflect.Descriptor instead.
func (*Telemetry) Descriptor() ([]byte, []int) {
	return file_meshtastic_telemetry_proto_rawDescGZIP(), []int{7}
}

func (x *Telemetry) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Telemetry) GetVariant() isTelemetry_Variant {
	if x != nil {
		return x.Variant
	}
	return nil
}

func (x *Telemetry) GetDeviceMetrics() *DeviceMetrics {
	if x != nil {
		if x, ok := x.Variant.(*Telemetry_DeviceMetrics); ok {
			return x.DeviceMetrics
		}
	}
	return nil
}

func (x *Telemetry) GetEnvironmentMetrics() *EnvironmentMetrics {
	if x != nil {
		if x, ok := x.Variant.(*Telemetry_EnvironmentMetrics); ok {
			return x.EnvironmentMetrics
		}
	}
	return nil
}

func (x *Telemetry) GetAirQualityMetrics() *AirQualityMetrics {
	if x != nil {
		if x, ok := x.Variant.(*Telemetry_AirQualityMetrics); ok {
			return x.AirQualityMetrics
		}
	}
	return nil
}

func (x *Telemetry) GetPowerMetrics() *PowerMetrics {
	if x != nil {
		if x, ok := x.Variant.(*Telemetry_PowerMetrics); ok {
			return x.PowerMetrics
		}
	}
	return nil
}

func (x *Telemetry) GetLocalStats() *LocalStats {
	if x != nil {
		if x, ok := x.Variant.(*Telemetry_LocalStats); ok {
			return x.LocalStats
		}
	}
	return nil
}

func (x *Telemetry) GetHealthMetrics() *HealthMetrics {
	if x != nil {
		if x, ok := x.Variant.(*Telemetry_HealthMetrics); ok {
			return x.HealthMetrics
		}
	}
	return nil
}

func (x *Telemetry) GetHostMetrics() *HostMetrics {
	if x != nil {
		if x, ok := x.Variant.(*Telemetry_HostMetrics); ok {
			return x.HostMetrics
		}
	}
	return nil
}

type isTelemetry_Variant interface {
	isTelemetry_Variant()
}

type Telemetry_DeviceMetrics struct {
	// Key native device metrics such as battery level
	DeviceMetrics *DeviceMetrics `protobuf:"bytes,2,opt,name=device_metrics,json=deviceMetrics,proto3,oneof"`
}

type Telemetry_EnvironmentMetrics struct {
	// Weather station or other environmental metrics
	EnvironmentMetrics *EnvironmentMetrics `protobuf:"bytes,3,opt,name=environment_metrics,json=environmentMetrics,proto3,oneof"`
}

type Telemetry_AirQualityMetrics struct {
	// Air quality metrics
	AirQualityMetrics *AirQualityMetrics `protobuf:"bytes,4,opt,name=air_quality_metrics,json=airQualityMetrics,proto3,oneof"`
}

type Telemetry_PowerMetrics struct {
	// Power Metrics
	PowerMetrics *PowerMetrics `protobuf:"bytes,5,opt,name=power_metrics,json=powerMetrics,proto3,oneof"`
}

type Telemetry_LocalStats struct {
	// Local device mesh statistics
	LocalStats *LocalStats `protobuf:"bytes,6,opt,name=local_stats,json=localStats,proto3,oneof"`
}

type Telemetry_HealthMetrics struct {
	// Health telemetry metrics
	HealthMetrics *HealthMetrics `protobuf:"bytes,7,opt,name=health_metrics,json=healthMetrics,proto3,oneof"`
}

type Telemetry_HostMetrics struct {
	// Linux host metrics
	HostMetrics *HostMetrics `protobuf:"bytes,8,opt,name=host_metrics,json=hostMetrics,proto3,oneof"`
}

func (*Telemetry_DeviceMetrics) isTelemetry_Variant() {}

func (*Telemetry_EnvironmentMetrics) isTelemetry_Variant() {}

func (*Telemetry_AirQualityMetrics) isTelemetry_Variant() {}

func (*Telemetry_PowerMetrics) isTelemetry_Variant() {}

func (*Telemetry_LocalStats) isTelemetry_Variant() {}

func (*Telemetry_HealthMetrics) isTelemetry_Variant() {}

func (*Telemetry_HostMetrics) isTelemetry_Variant() {}

// NAU7802 Telemetry configuration, for saving to flash
type Nau7802Config struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The offset setting for the NAU7802
	ZeroOffset int32 `protobuf:"varint,1,opt,name=zeroOffset,proto3" json:"zeroOffset,omitempty"`
	// The calibration factor for the NAU7802
	CalibrationFactor float32 `protobuf:"fixed32,2,opt,name=calibrationFactor,proto3" json:"calibrationFactor,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Nau7802Config) Reset() {
	*x = Nau7802Config{}
	mi := &file_meshtastic_telemetry_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Nau7802Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nau7802Config) ProtoMessage() {}

func (x *Nau7802Config) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_telemetry_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nau7802Config.ProtoReflect.Descriptor instead.
func (*Nau7802Config) Descriptor() ([]byte, []int) {
	return file_meshtastic_telemetry_proto_rawDescGZIP(), []int{8}
}

func (x *Nau7802Config) GetZeroOffset() int32 {
	if x != nil {
		return x.ZeroOffset
	}
	return 0
}

func (x *Nau7802Config) GetCalibrationFactor() float32 {
	if x != nil {
		return x.CalibrationFactor
	}
	return 0
}

var File_meshtastic_telemetry_proto protoreflect.FileDescriptor

const file_meshtastic_telemetry_proto_rawDesc = "" +
	"\n" +
	"\x1ameshtastic/telemetry.proto\x12\n" +
	"meshtastic\"\xb8\x02\n" +
	"\rDeviceMetrics\x12(\n" +
	"\rbattery_level\x18\x01 \x01(\rH\x00R\fbatteryLevel\x88\x01\x01\x12\x1d\n" +
	"\avoltage\x18\x02 \x01(\x02H\x01R\avoltage\x88\x01\x01\x124\n" +
	"\x13channel_utilization\x18\x03 \x01(\x02H\x02R\x12channelUtilization\x88\x01\x01\x12#\n" +
	"\vair_util_tx\x18\x04 \x01(\x02H\x03R\tairUtilTx\x88\x01\x01\x12*\n" +
	"\x0euptime_seconds\x18\x05 \x01(\rH\x04R\ruptimeSeconds\x88\x01\x01B\x10\n" +
	"\x0e_battery_levelB\n" +
	"\n" +
	"\b_voltageB\x16\n" +
	"\x14_channel_utilizationB\x0e\n" +
	"\f_air_util_txB\x11\n" +
	"\x0f_uptime_seconds\"\xfb\b\n" +
	"\x12EnvironmentMetrics\x12%\n" +
	"\vtemperature\x18\x01 \x01(\x02H\x00R\vtemperature\x88\x01\x01\x120\n" +
	"\x11relative_humidity\x18\x02 \x01(\x02H\x01R\x10relativeHumidity\x88\x01\x01\x124\n" +
	"\x13barometric_pressure\x18\x03 \x01(\x02H\x02R\x12barometricPressure\x88\x01\x01\x12*\n" +
	"\x0egas_resistance\x18\x04 \x01(\x02H\x03R\rgasResistance\x88\x01\x01\x12\x1d\n" +
	"\avoltage\x18\x05 \x01(\x02H\x04R\avoltage\x88\x01\x01\x12\x1d\n" +
	"\acurrent\x18\x06 \x01(\x02H\x05R\acurrent\x88\x01\x01\x12\x15\n" +
	"\x03iaq\x18\a \x01(\rH\x06R\x03iaq\x88\x01\x01\x12\x1f\n" +
	"\bdistance\x18\b \x01(\x02H\aR\bdistance\x88\x01\x01\x12\x15\n" +
	"\x03lux\x18\t \x01(\x02H\bR\x03lux\x88\x01\x01\x12 \n" +
	"\twhite_lux\x18\n" +
	" \x01(\x02H\tR\bwhiteLux\x88\x01\x01\x12\x1a\n" +
	"\x06ir_lux\x18\v \x01(\x02H\n" +
	"R\x05irLux\x88\x01\x01\x12\x1a\n" +
	"\x06uv_lux\x18\f \x01(\x02H\vR\x05uvLux\x88\x01\x01\x12*\n" +
	"\x0ewind_direction\x18\r \x01(\rH\fR\rwindDirection\x88\x01\x01\x12\"\n" +
	"\n" +
	"wind_speed\x18\x0e \x01(\x02H\rR\twindSpeed\x88\x01\x01\x12\x1b\n" +
	"\x06weight\x18\x0f \x01(\x02H\x0eR\x06weight\x88\x01\x01\x12 \n" +
	"\twind_gust\x18\x10 \x01(\x02H\x0fR\bwindGust\x88\x01\x01\x12 \n" +
	"\twind_lull\x18\x11 \x01(\x02H\x10R\bwindLull\x88\x01\x01\x12!\n" +
	"\tradiation\x18\x12 \x01(\x02H\x11R\tradiation\x88\x01\x01\x12$\n" +
	"\vrainfall_1h\x18\x13 \x01(\x02H\x12R\n" +
	"rainfall1h\x88\x01\x01\x12&\n" +
	"\frainfall_24h\x18\x14 \x01(\x02H\x13R\vrainfall24h\x88\x01\x01\x12(\n" +
	"\rsoil_moisture\x18\x15 \x01(\rH\x14R\fsoilMoisture\x88\x01\x01\x12.\n" +
	"\x10soil_temperature\x18\x16 \x01(\x02H\x15R\x0fsoilTemperature\x88\x01\x01B\x0e\n" +
	"\f_temperatureB\x14\n" +
	"\x12_relative_humidityB\x16\n" +
	"\x14_barometric_pressureB\x11\n" +
	"\x0f_gas_resistanceB\n" +
	"\n" +
	"\b_voltageB\n" +
	"\n" +
	"\b_currentB\x06\n" +
	"\x04_iaqB\v\n" +
	"\t_distanceB\x06\n" +
	"\x04_luxB\f\n" +
	"\n" +
	"_white_luxB\t\n" +
	"\a_ir_luxB\t\n" +
	"\a_uv_luxB\x11\n" +
	"\x0f_wind_directionB\r\n" +
	"\v_wind_speedB\t\n" +
	"\a_weightB\f\n" +
	"\n" +
	"_wind_gustB\f\n" +
	"\n" +
	"_wind_lullB\f\n" +
	"\n" +
	"_radiationB\x0e\n" +
	"\f_rainfall_1hB\x0f\n" +
	"\r_rainfall_24hB\x10\n" +
	"\x0e_soil_moistureB\x13\n" +
	"\x11_soil_temperature\"\xee\x06\n" +
	"\fPowerMetrics\x12$\n" +
	"\vch1_voltage\x18\x01 \x01(\x02H\x00R\n" +
	"ch1Voltage\x88\x01\x01\x12$\n" +
	"\vch1_current\x18\x02 \x01(\x02H\x01R\n" +
	"ch1Current\x88\x01\x01\x12$\n" +
	"\vch2_voltage\x18\x03 \x01(\x02H\x02R\n" +
	"ch2Voltage\x88\x01\x01\x12$\n" +
	"\vch2_current\x18\x04 \x01(\x02H\x03R\n" +
	"ch2Current\x88\x01\x01\x12$\n" +
	"\vch3_voltage\x18\x05 \x01(\x02H\x04R\n" +
	"ch3Voltage\x88\x01\x01\x12$\n" +
	"\vch3_current\x18\x06 \x01(\x02H\x05R\n" +
	"ch3Current\x88\x01\x01\x12$\n" +
	"\vch4_voltage\x18\a \x01(\x02H\x06R\n" +
	"ch4Voltage\x88\x01\x01\x12$\n" +
	"\vch4_current\x18\b \x01(\x02H\aR\n" +
	"ch4Current\x88\x01\x01\x12$\n" +
	"\vch5_voltage\x18\t \x01(\x02H\bR\n" +
	"ch5Voltage\x88\x01\x01\x12$\n" +
	"\vch5_current\x18\n" +
	" \x01(\x02H\tR\n" +
	"ch5Current\x88\x01\x01\x12$\n" +
	"\vch6_voltage\x18\v \x01(\x02H\n" +
	"R\n" +
	"ch6Voltage\x88\x01\x01\x12$\n" +
	"\vch6_current\x18\f \x01(\x02H\vR\n" +
	"ch6Current\x88\x01\x01\x12$\n" +
	"\vch7_voltage\x18\r \x01(\x02H\fR\n" +
	"ch7Voltage\x88\x01\x01\x12$\n" +
	"\vch7_current\x18\x0e \x01(\x02H\rR\n" +
	"ch7Current\x88\x01\x01\x12$\n" +
	"\vch8_voltage\x18\x0f \x01(\x02H\x0eR\n" +
	"ch8Voltage\x88\x01\x01\x12$\n" +
	"\vch8_current\x18\x10 \x01(\x02H\x0fR\n" +
	"ch8Current\x88\x01\x01B\x0e\n" +
	"\f_ch1_voltageB\x0e\n" +
	"\f_ch1_currentB\x0e\n" +
	"\f_ch2_voltageB\x0e\n" +
	"\f_ch2_currentB\x0e\n" +
	"\f_ch3_voltageB\x0e\n" +
	"\f_ch3_currentB\x0e\n" +
	"\f_ch4_voltageB\x0e\n" +
	"\f_ch4_currentB\x0e\n" +
	"\f_ch5_voltageB\x0e\n" +
	"\f_ch5_currentB\x0e\n" +
	"\f_ch6_voltageB\x0e\n" +
	"\f_ch6_currentB\x0e\n" +
	"\f_ch7_voltageB\x0e\n" +
	"\f_ch7_currentB\x0e\n" +
	"\f_ch8_voltageB\x0e\n" +
	"\f_ch8_current\"\xc5\a\n" +
	"\x11AirQualityMetrics\x12(\n" +
	"\rpm10_standard\x18\x01 \x01(\rH\x00R\fpm10Standard\x88\x01\x01\x12(\n" +
	"\rpm25_standard\x18\x02 \x01(\rH\x01R\fpm25Standard\x88\x01\x01\x12*\n" +
	"\x0epm100_standard\x18\x03 \x01(\rH\x02R\rpm100Standard\x88\x01\x01\x122\n" +
	"\x12pm10_environmental\x18\x04 \x01(\rH\x03R\x11pm10Environmental\x88\x01\x01\x122\n" +
	"\x12pm25_environmental\x18\x05 \x01(\rH\x04R\x11pm25Environmental\x88\x01\x01\x124\n" +
	"\x13pm100_environmental\x18\x06 \x01(\rH\x05R\x12pm100Environmental\x88\x01\x01\x12*\n" +
	"\x0eparticles_03um\x18\a \x01(\rH\x06R\rparticles03um\x88\x01\x01\x12*\n" +
	"\x0eparticles_05um\x18\b \x01(\rH\aR\rparticles05um\x88\x01\x01\x12*\n" +
	"\x0eparticles_10um\x18\t \x01(\rH\bR\rparticles10um\x88\x01\x01\x12*\n" +
	"\x0eparticles_25um\x18\n" +
	" \x01(\rH\tR\rparticles25um\x88\x01\x01\x12*\n" +
	"\x0eparticles_50um\x18\v \x01(\rH\n" +
	"R\rparticles50um\x88\x01\x01\x12,\n" +
	"\x0fparticles_100um\x18\f \x01(\rH\vR\x0eparticles100um\x88\x01\x01\x12\x15\n" +
	"\x03co2\x18\r \x01(\rH\fR\x03co2\x88\x01\x01\x12,\n" +
	"\x0fco2_temperature\x18\x0e \x01(\x02H\rR\x0eco2Temperature\x88\x01\x01\x12&\n" +
	"\fco2_humidity\x18\x0f \x01(\x02H\x0eR\vco2Humidity\x88\x01\x01B\x10\n" +
	"\x0e_pm10_standardB\x10\n" +
	"\x0e_pm25_standardB\x11\n" +
	"\x0f_pm100_standardB\x15\n" +
	"\x13_pm10_environmentalB\x15\n" +
	"\x13_pm25_environmentalB\x16\n" +
	"\x14_pm100_environmentalB\x11\n" +
	"\x0f_particles_03umB\x11\n" +
	"\x0f_particles_05umB\x11\n" +
	"\x0f_particles_10umB\x11\n" +
	"\x0f_particles_25umB\x11\n" +
	"\x0f_particles_50umB\x12\n" +
	"\x10_particles_100umB\x06\n" +
	"\x04_co2B\x12\n" +
	"\x10_co2_temperatureB\x0f\n" +
	"\r_co2_humidity\"\x96\x04\n" +
	"\n" +
	"LocalStats\x12%\n" +
	"\x0euptime_seconds\x18\x01 \x01(\rR\ruptimeSeconds\x12/\n" +
	"\x13channel_utilization\x18\x02 \x01(\x02R\x12channelUtilization\x12\x1e\n" +
	"\vair_util_tx\x18\x03 \x01(\x02R\tairUtilTx\x12$\n" +
	"\x0enum_packets_tx\x18\x04 \x01(\rR\fnumPacketsTx\x12$\n" +
	"\x0enum_packets_rx\x18\x05 \x01(\rR\fnumPacketsRx\x12+\n" +
	"\x12num_packets_rx_bad\x18\x06 \x01(\rR\x0fnumPacketsRxBad\x12(\n" +
	"\x10num_online_nodes\x18\a \x01(\rR\x0enumOnlineNodes\x12&\n" +
	"\x0fnum_total_nodes\x18\b \x01(\rR\rnumTotalNodes\x12\x1e\n" +
	"\vnum_rx_dupe\x18\t \x01(\rR\tnumRxDupe\x12 \n" +
	"\fnum_tx_relay\x18\n" +
	" \x01(\rR\n" +
	"numTxRelay\x121\n" +
	"\x15num_tx_relay_canceled\x18\v \x01(\rR\x12numTxRelayCanceled\x12(\n" +
	"\x10heap_total_bytes\x18\f \x01(\rR\x0eheapTotalBytes\x12&\n" +
	"\x0fheap_free_bytes\x18\r \x01(\rR\rheapFreeBytes\"\x98\x01\n" +
	"\rHealthMetrics\x12 \n" +
	"\theart_bpm\x18\x01 \x01(\rH\x00R\bheartBpm\x88\x01\x01\x12\x17\n" +
	"\x04spO2\x18\x02 \x01(\rH\x01R\x04spO2\x88\x01\x01\x12%\n" +
	"\vtemperature\x18\x03 \x01(\x02H\x02R\vtemperature\x88\x01\x01B\f\n" +
	"\n" +
	"_heart_bpmB\a\n" +
	"\x05_spO2B\x0e\n" +
	"\f_temperature\"\x80\x03\n" +
	"\vHostMetrics\x12%\n" +
	"\x0euptime_seconds\x18\x01 \x01(\rR\ruptimeSeconds\x12#\n" +
	"\rfreemem_bytes\x18\x02 \x01(\x04R\ffreememBytes\x12'\n" +
	"\x0fdiskfree1_bytes\x18\x03 \x01(\x04R\x0ediskfree1Bytes\x12,\n" +
	"\x0fdiskfree2_bytes\x18\x04 \x01(\x04H\x00R\x0ediskfree2Bytes\x88\x01\x01\x12,\n" +
	"\x0fdiskfree3_bytes\x18\x05 \x01(\x04H\x01R\x0ediskfree3Bytes\x88\x01\x01\x12\x14\n" +
	"\x05load1\x18\x06 \x01(\rR\x05load1\x12\x14\n" +
	"\x05load5\x18\a \x01(\rR\x05load5\x12\x16\n" +
	"\x06load15\x18\b \x01(\rR\x06load15\x12$\n" +
	"\vuser_string\x18\t \x01(\tH\x02R\n" +
	"userString\x88\x01\x01B\x12\n" +
	"\x10_diskfree2_bytesB\x12\n" +
	"\x10_diskfree3_bytesB\x0e\n" +
	"\f_user_string\"\x90\x04\n" +
	"\tTelemetry\x12\x12\n" +
	"\x04time\x18\x01 \x01(\aR\x04time\x12B\n" +
	"\x0edevice_metrics\x18\x02 \x01(\v2\x19.meshtastic.DeviceMetricsH\x00R\rdeviceMetrics\x12Q\n" +
	"\x13environment_metrics\x18\x03 \x01(\v2\x1e.meshtastic.EnvironmentMetricsH\x00R\x12environmentMetrics\x12O\n" +
	"\x13air_quality_metrics\x18\x04 \x01(\v2\x1d.meshtastic.AirQualityMetricsH\x00R\x11airQualityMetrics\x12?\n" +
	"\rpower_metrics\x18\x05 \x01(\v2\x18.meshtastic.PowerMetricsH\x00R\fpowerMetrics\x129\n" +
	"\vlocal_stats\x18\x06 \x01(\v2\x16.meshtastic.LocalStatsH\x00R\n" +
	"localStats\x12B\n" +
	"\x0ehealth_metrics\x18\a \x01(\v2\x19.meshtastic.HealthMetricsH\x00R\rhealthMetrics\x12<\n" +
	"\fhost_metrics\x18\b \x01(\v2\x17.meshtastic.HostMetricsH\x00R\vhostMetricsB\t\n" +
	"\avariant\"]\n" +
	"\rNau7802Config\x12\x1e\n" +
	"\n" +
	"zeroOffset\x18\x01 \x01(\x05R\n" +
	"zeroOffset\x12,\n" +
	"\x11calibrationFactor\x18\x02 \x01(\x02R\x11calibrationFactor*\xb9\x04\n" +
	"\x13TelemetrySensorType\x12\x10\n" +
	"\fSENSOR_UNSET\x10\x00\x12\n" +
	"\n" +
	"\x06BME280\x10\x01\x12\n" +
	"\n" +
	"\x06BME680\x10\x02\x12\v\n" +
	"\aMCP9808\x10\x03\x12\n" +
	"\n" +
	"\x06INA260\x10\x04\x12\n" +
	"\n" +
	"\x06INA219\x10\x05\x12\n" +
	"\n" +
	"\x06BMP280\x10\x06\x12\t\n" +
	"\x05SHTC3\x10\a\x12\t\n" +
	"\x05LPS22\x10\b\x12\v\n" +
	"\aQMC6310\x10\t\x12\v\n" +
	"\aQMI8658\x10\n" +
	"\x12\f\n" +
	"\bQMC5883L\x10\v\x12\t\n" +
	"\x05SHT31\x10\f\x12\f\n" +
	"\bPMSA003I\x10\r\x12\v\n" +
	"\aINA3221\x10\x0e\x12\n" +
	"\n" +
	"\x06BMP085\x10\x0f\x12\f\n" +
	"\bRCWL9620\x10\x10\x12\t\n" +
	"\x05SHT4X\x10\x11\x12\f\n" +
	"\bVEML7700\x10\x12\x12\f\n" +
	"\bMLX90632\x10\x13\x12\v\n" +
	"\aOPT3001\x10\x14\x12\f\n" +
	"\bLTR390UV\x10\x15\x12\x0e\n" +
	"\n" +
	"TSL25911FN\x10\x16\x12\t\n" +
	"\x05AHT10\x10\x17\x12\x10\n" +
	"\fDFROBOT_LARK\x10\x18\x12\v\n" +
	"\aNAU7802\x10\x19\x12\n" +
	"\n" +
	"\x06BMP3XX\x10\x1a\x12\f\n" +
	"\bICM20948\x10\x1b\x12\f\n" +
	"\bMAX17048\x10\x1c\x12\x11\n" +
	"\rCUSTOM_SENSOR\x10\x1d\x12\f\n" +
	"\bMAX30102\x10\x1e\x12\f\n" +
	"\bMLX90614\x10\x1f\x12\t\n" +
	"\x05SCD4X\x10 \x12\v\n" +
	"\aRADSENS\x10!\x12\n" +
	"\n" +
	"\x06INA226\x10\"\x12\x10\n" +
	"\fDFROBOT_RAIN\x10#\x12\n" +
	"\n" +
	"\x06DPS310\x10$\x12\f\n" +
	"\bRAK12035\x10%\x12\f\n" +
	"\bMAX17261\x10&\x12\v\n" +
	"\aPCT2075\x10'\x12\v\n" +
	"\aADS1X15\x10(Bd\n" +
	"\x13com.geeksville.meshB\x0fTelemetryProtosZ\"github.com/meshtastic/go/generated\xaa\x02\x14Meshtastic.Protobufs\xba\x02\x00b\x06proto3"

var (
	file_meshtastic_telemetry_proto_rawDescOnce sync.Once
	file_meshtastic_telemetry_proto_rawDescData []byte
)

func file_meshtastic_telemetry_proto_rawDescGZIP() []byte {
	file_meshtastic_telemetry_proto_rawDescOnce.Do(func() {
		file_meshtastic_telemetry_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_meshtastic_telemetry_proto_rawDesc), len(file_meshtastic_telemetry_proto_rawDesc)))
	})
	return file_meshtastic_telemetry_proto_rawDescData
}

var file_meshtastic_telemetry_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_meshtastic_telemetry_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_meshtastic_telemetry_proto_goTypes = []any{
	(TelemetrySensorType)(0),   // 0: meshtastic.TelemetrySensorType
	(*DeviceMetrics)(nil),      // 1: meshtastic.DeviceMetrics
	(*EnvironmentMetrics)(nil), // 2: meshtastic.EnvironmentMetrics
	(*PowerMetrics)(nil),       // 3: meshtastic.PowerMetrics
	(*AirQualityMetrics)(nil),  // 4: meshtastic.AirQualityMetrics
	(*LocalStats)(nil),         // 5: meshtastic.LocalStats
	(*HealthMetrics)(nil),      // 6: meshtastic.HealthMetrics
	(*HostMetrics)(nil),        // 7: meshtastic.HostMetrics
	(*Telemetry)(nil),          // 8: meshtastic.Telemetry
	(*Nau7802Config)(nil),      // 9: meshtastic.Nau7802Config
}
var file_meshtastic_telemetry_proto_depIdxs = []int32{
	1, // 0: meshtastic.Telemetry.device_metrics:type_name -> meshtastic.DeviceMetrics
	2, // 1: meshtastic.Telemetry.environment_metrics:type_name -> meshtastic.EnvironmentMetrics
	4, // 2: meshtastic.Telemetry.air_quality_metrics:type_name -> meshtastic.AirQualityMetrics
	3, // 3: meshtastic.Telemetry.power_metrics:type_name -> meshtastic.PowerMetrics
	5, // 4: meshtastic.Telemetry.local_stats:type_name -> meshtastic.LocalStats
	6, // 5: meshtastic.Telemetry.health_metrics:type_name -> meshtastic.HealthMetrics
	7, // 6: meshtastic.Telemetry.host_metrics:type_name -> meshtastic.HostMetrics
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_meshtastic_telemetry_proto_init() }
func file_meshtastic_telemetry_proto_init() {
	if File_meshtastic_telemetry_proto != nil {
		return
	}
	file_meshtastic_telemetry_proto_msgTypes[0].OneofWrappers = []any{}
	file_meshtastic_telemetry_proto_msgTypes[1].OneofWrappers = []any{}
	file_meshtastic_telemetry_proto_msgTypes[2].OneofWrappers = []any{}
	file_meshtastic_telemetry_proto_msgTypes[3].OneofWrappers = []any{}
	file_meshtastic_telemetry_proto_msgTypes[5].OneofWrappers = []any{}
	file_meshtastic_telemetry_proto_msgTypes[6].OneofWrappers = []any{}
	file_meshtastic_telemetry_proto_msgTypes[7].OneofWrappers = []any{
		(*Telemetry_DeviceMetrics)(nil),
		(*Telemetry_EnvironmentMetrics)(nil),
		(*Telemetry_AirQualityMetrics)(nil),
		(*Telemetry_PowerMetrics)(nil),
		(*Telemetry_LocalStats)(nil),
		(*Telemetry_HealthMetrics)(nil),
		(*Telemetry_HostMetrics)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_meshtastic_telemetry_proto_rawDesc), len(file_meshtastic_telemetry_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_meshtastic_telemetry_proto_goTypes,
		DependencyIndexes: file_meshtastic_telemetry_proto_depIdxs,
		EnumInfos:         file_meshtastic_telemetry_proto_enumTypes,
		MessageInfos:      file_meshtastic_telemetry_proto_msgTypes,
	}.Build()
	File_meshtastic_telemetry_proto = out.File
	file_meshtastic_telemetry_proto_goTypes = nil
	file_meshtastic_telemetry_proto_depIdxs = nil
}
