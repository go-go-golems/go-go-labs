// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: meshtastic/remote_hardware.proto

package generated

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TODO: REPLACE
type HardwareMessage_Type int32

const (
	// Unset/unused
	HardwareMessage_UNSET HardwareMessage_Type = 0
	// Set gpio gpios based on gpio_mask/gpio_value
	HardwareMessage_WRITE_GPIOS HardwareMessage_Type = 1
	// We are now interested in watching the gpio_mask gpios.
	// If the selected gpios change, please broadcast GPIOS_CHANGED.
	// Will implicitly change the gpios requested to be INPUT gpios.
	HardwareMessage_WATCH_GPIOS HardwareMessage_Type = 2
	// The gpios listed in gpio_mask have changed, the new values are listed in gpio_value
	HardwareMessage_GPIOS_CHANGED HardwareMessage_Type = 3
	// Read the gpios specified in gpio_mask, send back a READ_GPIOS_REPLY reply with gpio_value populated
	HardwareMessage_READ_GPIOS HardwareMessage_Type = 4
	// A reply to READ_GPIOS. gpio_mask and gpio_value will be populated
	HardwareMessage_READ_GPIOS_REPLY HardwareMessage_Type = 5
)

// Enum value maps for HardwareMessage_Type.
var (
	HardwareMessage_Type_name = map[int32]string{
		0: "UNSET",
		1: "WRITE_GPIOS",
		2: "WATCH_GPIOS",
		3: "GPIOS_CHANGED",
		4: "READ_GPIOS",
		5: "READ_GPIOS_REPLY",
	}
	HardwareMessage_Type_value = map[string]int32{
		"UNSET":            0,
		"WRITE_GPIOS":      1,
		"WATCH_GPIOS":      2,
		"GPIOS_CHANGED":    3,
		"READ_GPIOS":       4,
		"READ_GPIOS_REPLY": 5,
	}
)

func (x HardwareMessage_Type) Enum() *HardwareMessage_Type {
	p := new(HardwareMessage_Type)
	*p = x
	return p
}

func (x HardwareMessage_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HardwareMessage_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_meshtastic_remote_hardware_proto_enumTypes[0].Descriptor()
}

func (HardwareMessage_Type) Type() protoreflect.EnumType {
	return &file_meshtastic_remote_hardware_proto_enumTypes[0]
}

func (x HardwareMessage_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HardwareMessage_Type.Descriptor instead.
func (HardwareMessage_Type) EnumDescriptor() ([]byte, []int) {
	return file_meshtastic_remote_hardware_proto_rawDescGZIP(), []int{0, 0}
}

// An example app to show off the module system. This message is used for
// REMOTE_HARDWARE_APP PortNums.
// Also provides easy remote access to any GPIO.
// In the future other remote hardware operations can be added based on user interest
// (i.e. serial output, spi/i2c input/output).
// FIXME - currently this feature is turned on by default which is dangerous
// because no security yet (beyond the channel mechanism).
// It should be off by default and then protected based on some TBD mechanism
// (a special channel once multichannel support is included?)
type HardwareMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// What type of HardwareMessage is this?
	Type HardwareMessage_Type `protobuf:"varint,1,opt,name=type,proto3,enum=meshtastic.HardwareMessage_Type" json:"type,omitempty"`
	// What gpios are we changing. Not used for all MessageTypes, see MessageType for details
	GpioMask uint64 `protobuf:"varint,2,opt,name=gpio_mask,json=gpioMask,proto3" json:"gpio_mask,omitempty"`
	// For gpios that were listed in gpio_mask as valid, what are the signal levels for those gpios.
	// Not used for all MessageTypes, see MessageType for details
	GpioValue     uint64 `protobuf:"varint,3,opt,name=gpio_value,json=gpioValue,proto3" json:"gpio_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HardwareMessage) Reset() {
	*x = HardwareMessage{}
	mi := &file_meshtastic_remote_hardware_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HardwareMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardwareMessage) ProtoMessage() {}

func (x *HardwareMessage) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_remote_hardware_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardwareMessage.ProtoReflect.Descriptor instead.
func (*HardwareMessage) Descriptor() ([]byte, []int) {
	return file_meshtastic_remote_hardware_proto_rawDescGZIP(), []int{0}
}

func (x *HardwareMessage) GetType() HardwareMessage_Type {
	if x != nil {
		return x.Type
	}
	return HardwareMessage_UNSET
}

func (x *HardwareMessage) GetGpioMask() uint64 {
	if x != nil {
		return x.GpioMask
	}
	return 0
}

func (x *HardwareMessage) GetGpioValue() uint64 {
	if x != nil {
		return x.GpioValue
	}
	return 0
}

var File_meshtastic_remote_hardware_proto protoreflect.FileDescriptor

const file_meshtastic_remote_hardware_proto_rawDesc = "" +
	"\n" +
	" meshtastic/remote_hardware.proto\x12\n" +
	"meshtastic\"\xf1\x01\n" +
	"\x0fHardwareMessage\x124\n" +
	"\x04type\x18\x01 \x01(\x0e2 .meshtastic.HardwareMessage.TypeR\x04type\x12\x1b\n" +
	"\tgpio_mask\x18\x02 \x01(\x04R\bgpioMask\x12\x1d\n" +
	"\n" +
	"gpio_value\x18\x03 \x01(\x04R\tgpioValue\"l\n" +
	"\x04Type\x12\t\n" +
	"\x05UNSET\x10\x00\x12\x0f\n" +
	"\vWRITE_GPIOS\x10\x01\x12\x0f\n" +
	"\vWATCH_GPIOS\x10\x02\x12\x11\n" +
	"\rGPIOS_CHANGED\x10\x03\x12\x0e\n" +
	"\n" +
	"READ_GPIOS\x10\x04\x12\x14\n" +
	"\x10READ_GPIOS_REPLY\x10\x05Bc\n" +
	"\x13com.geeksville.meshB\x0eRemoteHardwareZ\"github.com/meshtastic/go/generated\xaa\x02\x14Meshtastic.Protobufs\xba\x02\x00b\x06proto3"

var (
	file_meshtastic_remote_hardware_proto_rawDescOnce sync.Once
	file_meshtastic_remote_hardware_proto_rawDescData []byte
)

func file_meshtastic_remote_hardware_proto_rawDescGZIP() []byte {
	file_meshtastic_remote_hardware_proto_rawDescOnce.Do(func() {
		file_meshtastic_remote_hardware_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_meshtastic_remote_hardware_proto_rawDesc), len(file_meshtastic_remote_hardware_proto_rawDesc)))
	})
	return file_meshtastic_remote_hardware_proto_rawDescData
}

var file_meshtastic_remote_hardware_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_meshtastic_remote_hardware_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_meshtastic_remote_hardware_proto_goTypes = []any{
	(HardwareMessage_Type)(0), // 0: meshtastic.HardwareMessage.Type
	(*HardwareMessage)(nil),   // 1: meshtastic.HardwareMessage
}
var file_meshtastic_remote_hardware_proto_depIdxs = []int32{
	0, // 0: meshtastic.HardwareMessage.type:type_name -> meshtastic.HardwareMessage.Type
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_meshtastic_remote_hardware_proto_init() }
func file_meshtastic_remote_hardware_proto_init() {
	if File_meshtastic_remote_hardware_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_meshtastic_remote_hardware_proto_rawDesc), len(file_meshtastic_remote_hardware_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_meshtastic_remote_hardware_proto_goTypes,
		DependencyIndexes: file_meshtastic_remote_hardware_proto_depIdxs,
		EnumInfos:         file_meshtastic_remote_hardware_proto_enumTypes,
		MessageInfos:      file_meshtastic_remote_hardware_proto_msgTypes,
	}.Build()
	File_meshtastic_remote_hardware_proto = out.File
	file_meshtastic_remote_hardware_proto_goTypes = nil
	file_meshtastic_remote_hardware_proto_depIdxs = nil
}
