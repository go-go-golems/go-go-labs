package templates

import (
	"github.com/wesen/friday-talks/internal/models"
	"github.com/wesen/friday-talks/internal/services"
	"fmt"
	"time"
)

templ TalksList(user *models.User, talks []*models.Talk, status string) {
	@Layout("Talks", user) {
		<div class="d-flex justify-content-between align-items-center mb-4">
			<h1>Talks</h1>
			if user != nil {
				<a href="/talks/propose" class="btn btn-primary">Propose a Talk</a>
			}
		</div>

		<div class="card mb-4">
			<div class="card-header">
				<ul class="nav nav-tabs card-header-tabs">
					<li class="nav-item">
						<a class={ "nav-link", templ.KV("active", status == "") } href="/talks">All</a>
					</li>
					<li class="nav-item">
						<a class={ "nav-link", templ.KV("active", status == "scheduled") } href="/talks?status=scheduled">Scheduled</a>
					</li>
					<li class="nav-item">
						<a class={ "nav-link", templ.KV("active", status == "proposed") } href="/talks?status=proposed">Proposed</a>
					</li>
					<li class="nav-item">
						<a class={ "nav-link", templ.KV("active", status == "completed") } href="/talks?status=completed">Past</a>
					</li>
				</ul>
			</div>
			<div class="card-body">
				if len(talks) == 0 {
					<div class="alert alert-info">
						No talks found.
					</div>
				} else {
					<div class="row">
						for _, talk := range talks {
							<div class="col-md-4 mb-4">
								@TalkCard(talk)
							</div>
						}
					</div>
				}
			</div>
		</div>
	}
}

templ TalkDetail(
	user *models.User, 
	talk *models.Talk, 
	voted bool, 
	attendance *models.Attendance, 
	resources []*models.Resource, 
	errorString string, 
	successString string) {
	@Layout(talk.Title, user) {
		if errorString != "" {
			@Alert("danger", errorString)
		}
		if successString != "" {
			@Alert("success", successString)
		}

		<div class="row">
			<div class="col-md-8">
				<div class="card mb-4">
					<div class="card-body">
						<h1 class="card-title">{ talk.Title }</h1>
						<div class="d-flex align-items-center mb-3">
							<span class={ "badge me-2", getBadgeColorForStatus(talk.Status) }>{ string(talk.Status) }</span>
							if talk.Speaker != nil {
								<span>Proposed by <strong>{ talk.Speaker.Name }</strong></span>
							}
						</div>

						if talk.ScheduledDate != nil {
							<div class="mb-3">
								<strong>Scheduled for:</strong> { formatDate(*talk.ScheduledDate) }
							</div>
						}
						
						<h5>Description</h5>
						<p class="card-text">{ talk.Description }</p>

						if talk.Status == models.TalkStatusProposed && user != nil {
							if !voted && talk.SpeakerID != user.ID {
								<div class="mt-4">
									<h5>Are you interested in this talk?</h5>
									<form action={ templ.SafeURL(fmt.Sprintf("/talks/%d/vote", talk.ID)) } method="POST" class="mb-3">
										<div class="mb-3">
											<label class="form-label">Interest Level</label>
											<div class="d-flex">
												<div class="form-check me-3">
													<input class="form-check-input" type="radio" name="interest_level" id="interest1" value="1"/>
													<label class="form-check-label" for="interest1">1 (Low)</label>
												</div>
												<div class="form-check me-3">
													<input class="form-check-input" type="radio" name="interest_level" id="interest2" value="2"/>
													<label class="form-check-label" for="interest2">2</label>
												</div>
												<div class="form-check me-3">
													<input class="form-check-input" type="radio" name="interest_level" id="interest3" value="3" checked/>
													<label class="form-check-label" for="interest3">3 (Medium)</label>
												</div>
												<div class="form-check me-3">
													<input class="form-check-input" type="radio" name="interest_level" id="interest4" value="4"/>
													<label class="form-check-label" for="interest4">4</label>
												</div>
												<div class="form-check me-3">
													<input class="form-check-input" type="radio" name="interest_level" id="interest5" value="5"/>
													<label class="form-check-label" for="interest5">5 (High)</label>
												</div>
											</div>
										</div>

										<div class="mb-3">
											<label class="form-label">Availability for Preferred Dates</label>
											<div class="row">
												for _, date := range talk.PreferredDates {
													<div class="col-md-4 mb-2">
														<div class="form-check">
															<input class="form-check-input" type="checkbox" name={ "availability_" + date } id={ "avail_" + date } value="true" checked/>
															<label class="form-check-label" for={ "avail_" + date }>
																{ formatShortDate(date) }
															</label>
														</div>
													</div>
												}
											</div>
										</div>

										<button type="submit" class="btn btn-primary">Submit Vote</button>
									</form>
								</div>
							}
						}

						if talk.Status == models.TalkStatusScheduled && user != nil {
							<div class="mt-4">
								<h5>Attendance</h5>
								if attendance == nil {
									<form action={ templ.SafeURL(fmt.Sprintf("/talks/%d/attend", talk.ID)) } method="POST" class="mb-3">
										<input type="hidden" name="status" value="confirmed"/>
										<button type="submit" class="btn btn-primary">Confirm Attendance</button>
									</form>
								} else {
									if attendance.Status == models.AttendanceStatusConfirmed {
										<div class="alert alert-success">
											You have confirmed your attendance. Looking forward to seeing you!
										</div>
										<form action={ templ.SafeURL(fmt.Sprintf("/talks/%d/attend", talk.ID)) } method="POST" class="mb-3">
											<input type="hidden" name="status" value="declined"/>
											<button type="submit" class="btn btn-outline-danger">Cancel Attendance</button>
										</form>
									} else if attendance.Status == models.AttendanceStatusDeclined {
										<div class="alert alert-secondary">
											You have declined to attend this talk.
										</div>
										<form action={ templ.SafeURL(fmt.Sprintf("/talks/%d/attend", talk.ID)) } method="POST" class="mb-3">
											<input type="hidden" name="status" value="confirmed"/>
											<button type="submit" class="btn btn-outline-primary">Confirm Attendance</button>
										</form>
									}
								}
							</div>
						}

						if talk.Status == models.TalkStatusCompleted && user != nil && attendance != nil && attendance.Status == models.AttendanceStatusAttended && attendance.Feedback == "" {
							<div class="mt-4">
								<h5>Share Your Feedback</h5>
								<form action={ templ.SafeURL(fmt.Sprintf("/talks/%d/feedback", talk.ID)) } method="POST" class="mb-3">
									<div class="mb-3">
										<label for="feedback" class="form-label">Your thoughts on this talk</label>
										<textarea class="form-control" id="feedback" name="feedback" rows="3" required></textarea>
									</div>
									<button type="submit" class="btn btn-primary">Submit Feedback</button>
								</form>
							</div>
						}
					</div>
				</div>
				
				if len(resources) > 0 {
					<div class="card mb-4">
						<div class="card-header">
							<h5 class="mb-0">Resources</h5>
						</div>
						<div class="card-body">
							<ul class="list-group list-group-flush">
								for _, resource := range resources {
									<li class="list-group-item d-flex justify-content-between align-items-center">
										<div>
											<span class={ "badge me-2", getResourceBadgeColor(resource.Type) }>{ string(resource.Type) }</span>
											<a href={ templ.SafeURL(resource.URL) } target="_blank">{ resource.Title }</a>
										</div>
										if user != nil && (user.ID == talk.SpeakerID || isAdminUser(user)) {
											<form action={ templ.SafeURL(fmt.Sprintf("/talks/%d/resources/%d/delete", talk.ID, resource.ID)) } method="POST">
												<button type="submit" class="btn btn-sm btn-outline-danger" onclick="return confirm('Are you sure you want to delete this resource?')">Delete</button>
											</form>
										}
									</li>
								}
							</ul>
						</div>
					</div>
				}

				if user != nil && (user.ID == talk.SpeakerID || isAdminUser(user)) {
					<div class="card mb-4">
						<div class="card-header">
							<h5 class="mb-0">Add Resource</h5>
						</div>
						<div class="card-body">
							<form action={ templ.SafeURL(fmt.Sprintf("/talks/%d/resources", talk.ID)) } method="POST">
								<div class="mb-3">
									<label for="title" class="form-label">Title</label>
									<input type="text" class="form-control" id="title" name="title" required/>
								</div>
								<div class="mb-3">
									<label for="url" class="form-label">URL</label>
									<input type="url" class="form-control" id="url" name="url" required/>
								</div>
								<div class="mb-3">
									<label for="type" class="form-label">Type</label>
									<select class="form-select" id="type" name="type" required>
										<option value="slides">Slides</option>
										<option value="video">Video</option>
										<option value="code">Code</option>
										<option value="article">Article</option>
										<option value="other">Other</option>
									</select>
								</div>
								<button type="submit" class="btn btn-primary">Add Resource</button>
							</form>
						</div>
					</div>
				}
			</div>

			<div class="col-md-4">
				if user != nil && (user.ID == talk.SpeakerID || isAdminUser(user)) {
					<div class="card mb-4">
						<div class="card-header">
							<h5 class="mb-0">Manage Talk</h5>
						</div>
						<div class="card-body">
							if talk.Status == models.TalkStatusProposed {
								if isAdminUser(user) {
									<a href={ templ.SafeURL(fmt.Sprintf("/talks/%d/schedule", talk.ID)) } class="btn btn-success d-block mb-2">Schedule This Talk</a>
								}
								<a href={ templ.SafeURL(fmt.Sprintf("/talks/%d/edit", talk.ID)) } class="btn btn-primary d-block mb-2">Edit Talk</a>
								<form action={ templ.SafeURL(fmt.Sprintf("/talks/%d/cancel", talk.ID)) } method="POST" class="d-block">
									<button type="submit" class="btn btn-danger d-block w-100" onclick="return confirm('Are you sure you want to cancel this talk?')">Cancel Talk</button>
								</form>
							} else if talk.Status == models.TalkStatusScheduled {
								if isAdminUser(user) {
									<form action={ templ.SafeURL(fmt.Sprintf("/talks/%d/complete", talk.ID)) } method="POST" class="d-block mb-2">
										<button type="submit" class="btn btn-success d-block w-100">Mark as Completed</button>
									</form>
									<form action={ templ.SafeURL(fmt.Sprintf("/talks/%d/cancel", talk.ID)) } method="POST" class="d-block">
										<button type="submit" class="btn btn-danger d-block w-100" onclick="return confirm('Are you sure you want to cancel this talk?')">Cancel Talk</button>
									</form>
								}
							}
						</div>
					</div>
				}

				if talk.Status == models.TalkStatusScheduled {
					<div class="card mb-4">
						<div class="card-header">
							<h5 class="mb-0">When & Where</h5>
						</div>
						<div class="card-body">
							if talk.ScheduledDate != nil {
								<p><strong>Date:</strong> { formatDate(*talk.ScheduledDate) }</p>
								<p><strong>Time:</strong> 15:00 - 16:00</p>
								<p><strong>Location:</strong> Conference Room</p>
							}
						</div>
					</div>
				}

				if talk.Speaker != nil {
					<div class="card mb-4">
						<div class="card-header">
							<h5 class="mb-0">Speaker</h5>
						</div>
						<div class="card-body">
							<h5>{ talk.Speaker.Name }</h5>
							<p>{ talk.Speaker.Email }</p>
						</div>
					</div>
				}

				<div class="card mb-4">
					<div class="card-header">
						<h5 class="mb-0">Information</h5>
					</div>
					<div class="card-body">
						<p><strong>Proposed:</strong> { formatDate(talk.CreatedAt) }</p>
						if len(talk.PreferredDates) > 0 && talk.Status == models.TalkStatusProposed {
							<p><strong>Preferred Dates:</strong></p>
							<ul>
								for _, date := range talk.PreferredDates {
									<li>{ formatShortDate(date) }</li>
								}
							</ul>
						}
					</div>
				</div>
			</div>
		</div>
	}
}

templ ProposeTalk(user *models.User, errorString string, fridays []time.Time) {
	@Layout("Propose a Talk", user) {
		<div class="row justify-content-center">
			<div class="col-md-8">
				<div class="card">
					<div class="card-header">
						<h3 class="mb-0">Propose a Talk</h3>
					</div>
					<div class="card-body">
						if errorString != "" {
							@Alert("danger", errorString)
						}
						<form action="/talks/propose" method="POST">
							<div class="mb-3">
								<label for="title" class="form-label">Title</label>
								<input type="text" class="form-control" id="title" name="title" required/>
							</div>
							<div class="mb-3">
								<label for="description" class="form-label">Description</label>
								<textarea class="form-control" id="description" name="description" rows="5" required></textarea>
								<div class="form-text">Provide a detailed description of your talk including what attendees will learn.</div>
							</div>
							<div class="mb-3">
								<label class="form-label">Preferred Dates</label>
								<div class="form-text mb-2">Select dates when you would be available to give this talk.</div>
								<div class="row">
									for _, friday := range fridays {
										<div class="col-md-4 mb-2">
											<div class="form-check">
												<input class="form-check-input" type="checkbox" name="preferred_dates[]" id={ "date_" + friday.Format("2006-01-02") } value={ friday.Format("2006-01-02") }/>
												<label class="form-check-label" for={ "date_" + friday.Format("2006-01-02") }>
													{ friday.Format("Jan 2, 2006") } (Friday)
												</label>
											</div>
										</div>
									}
								</div>
							</div>
							<div class="d-grid">
								<button type="submit" class="btn btn-primary">Submit Proposal</button>
							</div>
						</form>
					</div>
				</div>
			</div>
		</div>
	}
}

templ EditTalk(user *models.User, talk *models.Talk, errorString string, fridays []time.Time) {
	@Layout("Edit Talk", user) {
		<div class="row justify-content-center">
			<div class="col-md-8">
				<div class="card">
					<div class="card-header">
						<h3 class="mb-0">Edit Talk</h3>
					</div>
					<div class="card-body">
						if errorString != "" {
							@Alert("danger", errorString)
						}
						<form action={ templ.SafeURL(fmt.Sprintf("/talks/%d/edit", talk.ID)) } method="POST">
							<div class="mb-3">
								<label for="title" class="form-label">Title</label>
								<input type="text" class="form-control" id="title" name="title" value={ talk.Title } required/>
							</div>
							<div class="mb-3">
								<label for="description" class="form-label">Description</label>
								<textarea class="form-control" id="description" name="description" rows="5" required>{ talk.Description }</textarea>
							</div>
							<div class="mb-3">
								<label class="form-label">Preferred Dates</label>
								<div class="form-text mb-2">Select dates when you would be available to give this talk.</div>
								<div class="row">
									for _, friday := range fridays {
										<div class="col-md-4 mb-2">
											<div class="form-check">
												<input 
													class="form-check-input" 
													type="checkbox" 
													name="preferred_dates[]" 
													id={ "date_" + friday.Format("2006-01-02") } 
													value={ friday.Format("2006-01-02") }
													checked={ isPreferredDate(talk.PreferredDates, friday.Format("2006-01-02")) }
												/>
												<label class="form-check-label" for={ "date_" + friday.Format("2006-01-02") }>
													{ friday.Format("Jan 2, 2006") } (Friday)
												</label>
											</div>
										</div>
									}
								</div>
							</div>
							<div class="d-flex justify-content-between">
								<a href={ templ.SafeURL(fmt.Sprintf("/talks/%d", talk.ID)) } class="btn btn-secondary">Cancel</a>
								<button type="submit" class="btn btn-primary">Save Changes</button>
							</div>
						</form>
					</div>
				</div>
			</div>
		</div>
	}
}

templ ScheduleTalk(user *models.User, talk *models.Talk, rankings []*services.TalkRanking, fridays []time.Time) {
	@Layout("Schedule Talk", user) {
		<div class="row justify-content-center">
			<div class="col-md-8">
				<div class="card mb-4">
					<div class="card-header">
						<h3 class="mb-0">Schedule Talk: { talk.Title }</h3>
					</div>
					<div class="card-body">
						<p>Speaker: <strong>{ talk.Speaker.Name }</strong></p>
						<hr/>
						<form action={ templ.SafeURL(fmt.Sprintf("/talks/%d/schedule", talk.ID)) } method="POST">
							<div class="mb-3">
								<label for="scheduled_date" class="form-label">Select a Date</label>
								<select class="form-select" id="scheduled_date" name="scheduled_date" required>
									for _, friday := range fridays {
										<option 
											value={ friday.Format("2006-01-02") }
											selected={ isPreferredDate(talk.PreferredDates, friday.Format("2006-01-02")) }
										>
											{ friday.Format("January 2, 2006") } (Friday)
										</option>
									}
								</select>
							</div>
							<div class="d-flex justify-content-between">
								<a href={ templ.SafeURL(fmt.Sprintf("/talks/%d", talk.ID)) } class="btn btn-secondary">Cancel</a>
								<button type="submit" class="btn btn-success">Schedule Talk</button>
							</div>
						</form>
					</div>
				</div>

				if len(rankings) > 0 {
					<div class="card mb-4">
						<div class="card-header">
							<h5 class="mb-0">Talk Rankings for Same Date</h5>
						</div>
						<div class="card-body">
							<p class="text-muted">Other talks proposed for the same dates, ranked by interest and availability:</p>
							<table class="table">
								<thead>
									<tr>
										<th>Title</th>
										<th>Interest</th>
										<th>Available Users</th>
										<th>Score</th>
									</tr>
								</thead>
								<tbody>
									for _, rank := range rankings {
										<tr>
											<td>
												<a href={ templ.SafeURL(fmt.Sprintf("/talks/%d", rank.Talk.ID)) }>
													{ rank.Talk.Title }
												</a>
											</td>
											<td>{ fmt.Sprintf("%d", rank.InterestScore) }</td>
											<td>{ fmt.Sprintf("%d", rank.AvailableUsers) }</td>
											<td>{ fmt.Sprintf("%.1f", rank.FinalScore) }</td>
										</tr>
									}
								</tbody>
							</table>
						</div>
					</div>
				}
			</div>
		</div>
	}
}

templ MyTalks(user *models.User, proposedTalks, scheduledTalks, completedTalks []*models.Talk) {
	@Layout("My Talks", user) {
		<div class="d-flex justify-content-between align-items-center mb-4">
			<h1>My Talks</h1>
			<a href="/talks/propose" class="btn btn-primary">Propose a Talk</a>
		</div>

		if len(proposedTalks) > 0 {
			<div class="card mb-4">
				<div class="card-header">
					<h3 class="mb-0">Proposed Talks</h3>
				</div>
				<div class="card-body">
					<div class="row">
						for _, talk := range proposedTalks {
							<div class="col-md-4 mb-4">
								@TalkCard(talk)
							</div>
						}
					</div>
				</div>
			</div>
		}

		if len(scheduledTalks) > 0 {
			<div class="card mb-4">
				<div class="card-header">
					<h3 class="mb-0">Upcoming Talks</h3>
				</div>
				<div class="card-body">
					<div class="row">
						for _, talk := range scheduledTalks {
							<div class="col-md-4 mb-4">
								@TalkCard(talk)
							</div>
						}
					</div>
				</div>
			</div>
		}

		if len(completedTalks) > 0 {
			<div class="card mb-4">
				<div class="card-header">
					<h3 class="mb-0">Past Talks</h3>
				</div>
				<div class="card-body">
					<div class="row">
						for _, talk := range completedTalks {
							<div class="col-md-4 mb-4">
								@TalkCard(talk)
							</div>
						}
					</div>
				</div>
			</div>
		}

		if len(proposedTalks) == 0 && len(scheduledTalks) == 0 && len(completedTalks) == 0 {
			<div class="alert alert-info">
				You haven't proposed any talks yet. Why not share your knowledge with the group?
			</div>
		}
	}
}

func formatShortDate(dateStr string) string {
	date, err := time.Parse("2006-01-02", dateStr)
	if err != nil {
		return dateStr
	}
	return date.Format("Jan 2, 2006")
}

func isPreferredDate(preferredDates []string, date string) bool {
	for _, d := range preferredDates {
		if d == date {
			return true
		}
	}
	return false
}

func getResourceBadgeColor(resourceType models.ResourceType) string {
	switch resourceType {
	case models.ResourceTypeSlides:
		return "bg-info"
	case models.ResourceTypeVideo:
		return "bg-danger"
	case models.ResourceTypeCode:
		return "bg-dark"
	case models.ResourceTypeArticle:
		return "bg-success"
	default:
		return "bg-secondary"
	}
}

func isAdminUser(user *models.User) bool {
	// In a real application, you would check admin status
	// For now, we'll treat all users as potential admins
	return true
}